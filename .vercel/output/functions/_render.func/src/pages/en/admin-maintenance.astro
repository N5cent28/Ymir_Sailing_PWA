---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import BackButton from '../../components/BackButton.astro';
import { getActiveMaintenanceIssues, getMaintenanceIssues } from '../../lib/database-postgres.js';

const activeIssues = await getActiveMaintenanceIssues();
const allIssues = await getMaintenanceIssues();
---

<Layout title="Maintenance Management - Ymir Sailing Club" lang="en">
  <Navigation />
  
  <main>
    <!-- Hero Section -->
    <section class="bg-gradient-to-br from-red-600 to-red-800 text-white py-20">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Back Button -->
        <div class="mb-6">
          <BackButton variant="admin" label="Back to Admin" />
        </div>
        
        <div class="text-center">
          <h1 class="text-5xl font-bold mb-6">
            Maintenance Management
          </h1>
          <p class="text-xl mb-8 max-w-3xl mx-auto">
            Track and manage boat maintenance issues reported by club members.
          </p>
        </div>
      </div>
    </section>

    <!-- Maintenance Content -->
    <section class="py-16 bg-white">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Stats Overview -->
        <div class="grid md:grid-cols-4 gap-6 mb-8">
          <div class="bg-white rounded-lg shadow-lg p-6 border-l-4 border-red-500">
            <div class="flex items-center">
              <div class="flex-1">
                <p class="text-sm font-medium text-gray-600">Active Issues</p>
                <p class="text-2xl font-bold text-gray-900">{activeIssues.length}</p>
              </div>
              <div class="text-red-500">
                <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow-lg p-6 border-l-4 border-yellow-500">
            <div class="flex items-center">
              <div class="flex-1">
                <p class="text-sm font-medium text-gray-600">Critical Issues</p>
                <p class="text-2xl font-bold text-gray-900">{activeIssues.filter(issue => issue.severity === 'critical').length}</p>
              </div>
              <div class="text-yellow-500">
                <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow-lg p-6 border-l-4 border-green-500">
            <div class="flex items-center">
              <div class="flex-1">
                <p class="text-sm font-medium text-gray-600">Resolved Today</p>
                <p class="text-2xl font-bold text-gray-900">0</p>
              </div>
              <div class="text-green-500">
                <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow-lg p-6 border-l-4 border-blue-500">
            <div class="flex items-center">
              <div class="flex-1">
                <p class="text-sm font-medium text-gray-600">Total Issues</p>
                <p class="text-2xl font-bold text-gray-900">{allIssues.length}</p>
              </div>
              <div class="text-blue-500">
                <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>

        <!-- Filter Tabs -->
        <div class="bg-white rounded-lg shadow-lg mb-8">
          <div class="border-b border-gray-200">
            <nav class="flex space-x-8 px-6">
              <button class="tab-btn active py-4 px-1 border-b-2 border-red-500 text-red-600 font-medium" data-tab="active">
                Active Issues ({activeIssues.length})
              </button>
              <button class="tab-btn py-4 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 font-medium" data-tab="all">
                All Issues ({allIssues.length})
              </button>
            </nav>
          </div>

          <!-- Tab Content -->
          <div class="p-6">
            <!-- Active Issues Tab -->
            <div id="activeTab" class="tab-content active">
              <div class="space-y-4">
                {activeIssues.length === 0 ? (
                  <div class="text-center py-8">
                    <div class="text-4xl mb-4">✅</div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">No Active Issues</h3>
                    <p class="text-gray-600">All boats are in good condition!</p>
                  </div>
                ) : (
                  activeIssues.map((issue) => (
                    <div class="border rounded-lg p-4 hover:shadow-md transition-shadow">
                      <div class="flex justify-between items-start mb-3">
                        <div class="flex-1">
                          <div class="flex items-center space-x-3 mb-2">
                            <h4 class="font-semibold text-lg text-gray-900">{issue.boat_name}</h4>
                            <span class={`px-2 py-1 rounded text-xs font-medium ${
                              issue.severity === 'critical' ? 'bg-red-100 text-red-800' :
                              issue.severity === 'high' ? 'bg-orange-100 text-orange-800' :
                              issue.severity === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-green-100 text-green-800'
                            }`}>
                              {issue.severity.toUpperCase()}
                            </span>
                            <span class="px-2 py-1 rounded text-xs font-medium bg-blue-100 text-blue-800">
                              {issue.issue_type}
                            </span>
                          </div>
                          <p class="text-gray-700 mb-2">{issue.description}</p>
                          <div class="text-sm text-gray-500">
                            Reported by {issue.reported_by_name} on {new Date(issue.reported_at).toLocaleDateString()}
                          </div>
                        </div>
                        <div class="flex space-x-2">
                          <button 
                            class="resolve-btn px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700 transition-colors"
                            data-issue-id={issue.id}
                          >
                            Resolve
                          </button>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>

            <!-- All Issues Tab -->
            <div id="allTab" class="tab-content hidden">
              <div class="space-y-4">
                {allIssues.map((issue) => (
                  <div class="border rounded-lg p-4 hover:shadow-md transition-shadow">
                    <div class="flex justify-between items-start mb-3">
                      <div class="flex-1">
                        <div class="flex items-center space-x-3 mb-2">
                          <h4 class="font-semibold text-lg text-gray-900">{issue.boat_name}</h4>
                          <span class={`px-2 py-1 rounded text-xs font-medium ${
                            issue.status === 'open' ? 'bg-red-100 text-red-800' :
                            issue.status === 'in_progress' ? 'bg-yellow-100 text-yellow-800' :
                            issue.status === 'resolved' ? 'bg-green-100 text-green-800' :
                            'bg-gray-100 text-gray-800'
                          }`}>
                            {issue.status.replace('_', ' ').toUpperCase()}
                          </span>
                          <span class={`px-2 py-1 rounded text-xs font-medium ${
                            issue.severity === 'critical' ? 'bg-red-100 text-red-800' :
                            issue.severity === 'high' ? 'bg-orange-100 text-orange-800' :
                            issue.severity === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-green-100 text-green-800'
                          }`}>
                            {issue.severity.toUpperCase()}
                          </span>
                        </div>
                        <p class="text-gray-700 mb-2">{issue.description}</p>
                        <div class="text-sm text-gray-500">
                          Reported by {issue.reported_by_name} on {new Date(issue.reported_at).toLocaleDateString()}
                          {issue.resolved_by_name && (
                            <span> • Resolved by {issue.resolved_by_name}</span>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <script>
    // Global function for updating issue status
    window.updateIssueStatus = async function(issueId, status) {
      try {
        console.log('Updating issue status:', issueId, status);
        
        const response = await fetch('/api/maintenance', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            issueId: parseInt(issueId),
            status: status
          }),
        });
        
        const data = await response.json();
        
        if (data.success) {
          alert('Issue status updated successfully!');
          location.reload(); // Refresh to show updated data
        } else {
          alert('Failed to update issue: ' + data.error);
        }
      } catch (error) {
        console.error('Error updating issue status:', error);
        alert('Failed to update issue status: ' + error.message);
      }
    };

    // Tab functionality
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    tabBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const tabName = btn.dataset.tab;
        
        // Update active tab button
        tabBtns.forEach(b => {
          b.classList.remove('active', 'border-red-500', 'text-red-600');
          b.classList.add('border-transparent', 'text-gray-500');
        });
        btn.classList.add('active', 'border-red-500', 'text-red-600');
        btn.classList.remove('border-transparent', 'text-gray-500');
        
        // Show active tab content
        tabContents.forEach(content => {
          content.classList.add('hidden');
          content.classList.remove('active');
        });
        document.getElementById(`${tabName}Tab`).classList.remove('hidden');
        document.getElementById(`${tabName}Tab`).classList.add('active');
      });
    });

    // Add event listeners for resolve buttons
    document.addEventListener('DOMContentLoaded', function() {
      const resolveButtons = document.querySelectorAll('.resolve-btn');
      resolveButtons.forEach(button => {
        button.addEventListener('click', function() {
          const issueId = this.getAttribute('data-issue-id');
          console.log('Resolve button clicked for issue:', issueId);
          window.updateIssueStatus(issueId, 'resolved');
        });
      });
    });

    // Check admin authentication
    function checkAdminAuth() {
      const adminMember = localStorage.getItem('adminMember');
      if (!adminMember) {
        window.location.href = '/en/admin-login?returnUrl=' + encodeURIComponent(window.location.pathname);
        return;
      }
    }

    // Check auth when page loads
    checkAdminAuth();
  </script>
</Layout> 