---
const currentLang = Astro.url.pathname.startsWith('/is') ? 'is' : 'en';
const basePath = currentLang === 'is' ? '/is' : '/en';

const navItems = {
  en: [
    { href: '/en', label: 'Info', hasBadge: false },
    { href: '/en/profile', label: 'My Profile', hasBadge: false },
    { href: '/en/my-boat', label: 'My Boat', hasBadge: false },
    { href: '/en/contact', label: 'Contact', hasBadge: false },
    { href: '/en/admin-login', label: 'Admin', hasBadge: false },
  ],
  is: [
    { href: '/is', label: 'Upplýsingar', hasBadge: false },
    { href: '/is/my-boat', label: 'Mín Bátur', hasBadge: false },
    { href: '/is/contact', label: 'Hafðu samband', hasBadge: false },
    { href: '/is/admin-login', label: 'Stjórn', hasBadge: false },
  ],
};

const items = navItems[currentLang as keyof typeof navItems];
---

<nav class="bg-white shadow-lg">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-16">
      <div class="flex items-center space-x-4">
        <a href={basePath} class="flex-shrink-0">
          <h1 class="text-2xl font-bold text-ocean-blue">Ýmir</h1>
        </a>
        
        <!-- Social Media Icons -->
        <div class="flex items-center space-x-3">
          <a 
            href="https://www.instagram.com/siglingafelag/" 
            target="_blank" 
            rel="noopener noreferrer"
            class="text-gray-600 hover:text-gray-900 transition-colors"
            aria-label="Instagram"
          >
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.354 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
            </svg>
          </a>
          
          <a 
            href="https://www.facebook.com/siglingaf.ymir" 
            target="_blank" 
            rel="noopener noreferrer"
            class="text-gray-600 hover:text-gray-900 transition-colors"
            aria-label="Facebook"
          >
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
            </svg>
          </a>
        </div>
      </div>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {items.map((item) => (
          <a
            href={item.href}
            class="text-anchor-gray hover:text-ocean-blue px-3 py-2 rounded-md text-sm font-medium transition-colors relative"
          >
            {item.label}
            {item.hasBadge && (
              <span 
                id={`badge-${item.href.split('/').pop()}`}
                class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center hidden"
              >
                0
              </span>
            )}
          </a>
        ))}
        
        <!-- Language Toggle -->
        <a
          href={currentLang === 'en' ? '/is' : '/en'}
          class="text-anchor-gray hover:text-ocean-blue px-3 py-2 rounded-md text-sm font-medium transition-colors"
        >
          {currentLang === 'en' ? 'IS' : 'EN'}
        </a>
        
        <!-- Logout Button for Desktop (shown when logged in) -->
        <button
          id="logout-button-desktop"
          class="text-red-600 hover:text-red-800 px-3 py-2 rounded-md text-sm font-medium transition-colors hidden"
          style="display: none;"
        >
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
            </svg>
            <span>{currentLang === 'en' ? 'Logout' : 'Útskrá'}</span>
          </div>
        </button>
        
        <!-- PWA Install Button for Desktop -->
        <button
          id="pwa-install-button-desktop"
          class="text-anchor-gray hover:text-ocean-blue px-3 py-2 rounded-md text-sm font-medium transition-colors hidden"
          style="display: none;"
        >
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
            </svg>
            <span id="pwa-install-text-desktop">{currentLang === 'en' ? 'Install App' : 'Sækja App'}</span>
          </div>
        </button>
      </div>

      <!-- Mobile Menu Button -->
      <div class="md:hidden">
        <button
          id="mobile-menu-button"
          class="text-anchor-gray hover:text-ocean-blue p-2 rounded-md transition-colors"
          aria-label="Open menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Menu Dropdown -->
  <div id="mobile-menu" class="hidden md:hidden bg-white border-t border-gray-200">
    <div class="px-2 pt-2 pb-3 space-y-1">
      {items.map((item) => (
        <a
          href={item.href}
          class="text-anchor-gray hover:text-ocean-blue block px-3 py-2 rounded-md text-base font-medium transition-colors relative"
        >
          {item.label}
          {item.hasBadge && (
            <span 
              id={`mobile-badge-${item.href.split('/').pop()}`}
              class="ml-2 bg-red-500 text-white text-xs rounded-full px-2 py-1 hidden"
            >
              0
            </span>
          )}
        </a>
      ))}
      
      <!-- Language Toggle for Mobile -->
      <a
        href={currentLang === 'en' ? '/is' : '/en'}
        class="text-anchor-gray hover:text-ocean-blue block px-3 py-2 rounded-md text-base font-medium transition-colors"
      >
        {currentLang === 'en' ? 'IS' : 'EN'}
      </a>
      
      <!-- Logout Button for Mobile (shown when logged in) -->
      <button
        id="logout-button-mobile"
        class="text-red-600 hover:text-red-800 block px-3 py-2 rounded-md text-base font-medium transition-colors w-full text-left hidden"
        style="display: none;"
      >
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
          </svg>
          <span>{currentLang === 'en' ? 'Logout' : 'Útskrá'}</span>
        </div>
      </button>
      
      <!-- PWA Install Button for Mobile -->
      <button
        id="pwa-install-button"
        class="text-anchor-gray hover:text-ocean-blue block px-3 py-2 rounded-md text-base font-medium transition-colors w-full text-left hidden"
        style="display: none;"
      >
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
          </svg>
          <span id="pwa-install-text">{currentLang === 'en' ? 'Install App' : 'Sækja App'}</span>
        </div>
      </button>
    </div>
  </div>
</nav>

<script>
  // Simple authentication check
  function getCurrentUser() {
    try {
      const memberData = localStorage.getItem('ymir_current_member');
      const expiryTime = localStorage.getItem('ymir_session_expiry');
      
      if (!memberData || !expiryTime) {
        return null;
      }
      
      if (Date.now() > parseInt(expiryTime)) {
        localStorage.removeItem('ymir_current_member');
        localStorage.removeItem('ymir_session_expiry');
        return null;
      }
      
      return JSON.parse(memberData);
    } catch (error) {
      return null;
    }
  }

  // Load unread message count for navigation badge
  async function loadUnreadMessageCount() {
    try {
      const currentMember = getCurrentUser();
      if (!currentMember) return;
      
      const response = await fetch(`/api/messages?action=unreadCount&memberNumber1=${currentMember.member_number}`);
      const data = await response.json();
      
      if (data.success) {
        const badge = document.getElementById('badge-messages');
        if (badge) {
          badge.textContent = data.count;
          badge.style.display = data.count > 0 ? 'flex' : 'none';
        }
      }
    } catch (error) {
      console.error('Error loading unread count:', error);
    }
  }

  // Load count on page load
  loadUnreadMessageCount();

  // Refresh count every 30 seconds
  setInterval(loadUnreadMessageCount, 30000);

  // Update logout button visibility based on login status
  function updateLogoutButtonVisibility() {
    const user = getCurrentUser();
    const logoutButtonDesktop = document.getElementById('logout-button-desktop');
    const logoutButtonMobile = document.getElementById('logout-button-mobile');
    
    if (user) {
      // User is logged in, show logout buttons
      if (logoutButtonDesktop) {
        logoutButtonDesktop.style.display = 'block';
        logoutButtonDesktop.classList.remove('hidden');
      }
      if (logoutButtonMobile) {
        logoutButtonMobile.style.display = 'block';
        logoutButtonMobile.classList.remove('hidden');
      }
    } else {
      // User is not logged in, hide logout buttons
      if (logoutButtonDesktop) {
        logoutButtonDesktop.style.display = 'none';
        logoutButtonDesktop.classList.add('hidden');
      }
      if (logoutButtonMobile) {
        logoutButtonMobile.style.display = 'none';
        logoutButtonMobile.classList.add('hidden');
      }
    }
  }

  // Handle logout functionality
  async function handleLogout() {
    try {
      // Import the auth module
      const { clearUserSession } = await import('/src/lib/auth.js');
      
      // Clear user session and clean up push subscriptions
      clearUserSession();
      
      // Update UI
      updateLogoutButtonVisibility();
      
      // Show success message
      const currentLang = window.location.pathname.startsWith('/is') ? 'is' : 'en';
      const message = currentLang === 'en' ? 'Logged out successfully' : 'Útskráning tókst';
      alert(message);
      
      // Redirect to home page
      const homePath = currentLang === 'en' ? '/en' : '/is';
      window.location.href = homePath;
      
    } catch (error) {
      console.error('Logout error:', error);
      alert('Error during logout. Please try again.');
    }
  }

  // Add event listeners for logout buttons
  const logoutButtonDesktop = document.getElementById('logout-button-desktop');
  const logoutButtonMobile = document.getElementById('logout-button-mobile');
  
  if (logoutButtonDesktop) {
    logoutButtonDesktop.addEventListener('click', handleLogout);
  }
  
  if (logoutButtonMobile) {
    logoutButtonMobile.addEventListener('click', handleLogout);
  }

  // Update logout button visibility on page load
  updateLogoutButtonVisibility();

  // Listen for auth state changes
  window.addEventListener('userLogin', updateLogoutButtonVisibility);
  window.addEventListener('userLogout', updateLogoutButtonVisibility);

  // Mobile menu toggle
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  
  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
      
      // Update button icon
      const icon = mobileMenuButton.querySelector('svg');
      if (icon) {
        if (mobileMenu.classList.contains('hidden')) {
          // Show hamburger icon
          icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>';
        } else {
          // Show X icon
          icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>';
        }
      }
    });
  }

  // PWA Installation Logic
  let deferredPrompt: any;
  const installButton = document.getElementById('pwa-install-button');
  const installButtonDesktop = document.getElementById('pwa-install-button-desktop');
  const installText = document.getElementById('pwa-install-text');
  const installTextDesktop = document.getElementById('pwa-install-text-desktop');

  // Function to show install buttons
  function showInstallButtons() {
    if (installButton) {
      installButton.style.display = 'block';
      installButton.classList.remove('hidden');
    }
    if (installButtonDesktop) {
      installButtonDesktop.style.display = 'block';
      installButtonDesktop.classList.remove('hidden');
    }
  }

  // Function to hide install buttons
  function hideInstallButtons() {
    if (installButton) {
      installButton.style.display = 'none';
      installButton.classList.add('hidden');
    }
    if (installButtonDesktop) {
      installButtonDesktop.style.display = 'none';
      installButtonDesktop.classList.add('hidden');
    }
  }

  // Listen for the beforeinstallprompt event
  window.addEventListener('beforeinstallprompt', (e) => {
    console.log('beforeinstallprompt event fired');
    // Prevent the mini-infobar from appearing on mobile
    e.preventDefault();
    // Stash the event so it can be triggered later
    deferredPrompt = e;
    // Show the install buttons
    showInstallButtons();
  });

  // Fallback: Check if PWA can be installed after a delay
  setTimeout(() => {
    if (!deferredPrompt && !window.matchMedia('(display-mode: standalone)').matches) {
      console.log('Checking PWA installability...');
      // Check if the app meets PWA criteria
      if ('serviceWorker' in navigator && window.matchMedia('(display-mode: browser)').matches) {
        console.log('PWA appears installable, showing install button');
        showInstallButtons();
      }
    }
  }, 2000);

  // Handle install button clicks
  function handleInstallClick() {
    if (deferredPrompt) {
      // Show the install prompt
      deferredPrompt.prompt();
      // Wait for the user to respond to the prompt
      deferredPrompt.userChoice.then((choiceResult: any) => {
        console.log(`User response to the install prompt: ${choiceResult.outcome}`);
        // Clear the deferredPrompt so it can only be used once
        deferredPrompt = null;
        // Hide the install buttons
        hideInstallButtons();
      });
    } else {
      // Fallback: Show instructions for manual installation
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
      
      if (isMobile) {
        if (isIOS) {
          alert('To install this app on iOS:\n1. Tap the Share button (square with arrow)\n2. Scroll down and tap "Add to Home Screen"\n3. Tap "Add" to confirm');
        } else {
          alert('To install this app on Android:\n1. Tap the menu (⋮) in your browser\n2. Tap "Add to Home screen" or "Install app"\n3. Tap "Add" or "Install" to confirm');
        }
      } else {
        alert('To install this app:\n1. Look for the install icon in your browser\'s address bar\n2. Or go to your browser menu and look for "Install" or "Add to Home Screen"');
      }
    }
  }

  if (installButton) {
    installButton.addEventListener('click', handleInstallClick);
  }

  if (installButtonDesktop) {
    installButtonDesktop.addEventListener('click', handleInstallClick);
  }

  // Listen for the appinstalled event
  window.addEventListener('appinstalled', () => {
    console.log('PWA was installed');
    // Hide the install buttons after successful installation
    hideInstallButtons();
  });

  // Check if the app is already installed
  if (window.matchMedia('(display-mode: standalone)').matches) {
    // App is already installed, hide the install buttons
    hideInstallButtons();
  }
</script> 