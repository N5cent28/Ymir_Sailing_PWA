---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import { 
  getBoatStatus, 
  getActiveCheckIns, 
  getOverdueBoats, 
  getRecentNotifications, 
  getAllMembers,
  getMemberTrips,
  getAllActiveCheckIns
} from '../../lib/database-postgres.js';

// Get all boat data
const boats = [
  { id: 'boat-1', name: 'Quest 1' },
  { id: 'boat-2', name: 'Quest 2' },
  { id: 'boat-3', name: 'Zest 1' },
  { id: 'boat-4', name: 'Zest 2' },
  { id: 'boat-5', name: 'Zest 3' },
  { id: 'boat-6', name: 'Zest 4' },
  { id: 'boat-7', name: 'Zest 5' },
  { id: 'boat-8', name: 'Zest 6' },
  { id: 'boat-9', name: 'Topaz 1' },
  { id: 'boat-10', name: 'Topaz 2' },
  { id: 'boat-11', name: 'Laser 1' },
  { id: 'boat-12', name: 'Laser 2' },
  { id: 'boat-13', name: 'Laser 3' },
  { id: 'boat-14', name: 'Laser 4' },
  { id: 'kayak', name: 'Kayak' },
  { id: 'paddle-board', name: 'Paddle Board' }
];

const boatStatuses = await Promise.all(boats.map(async (boat) => {
  const status = await getBoatStatus(boat.id);
  const activeCheckIns = await getActiveCheckIns(boat.id);
  return { ...boat, ...status, activeCheckIns };
}));

const overdueBoats = await getOverdueBoats();
const notifications = await getRecentNotifications(20);
const members = await getAllMembers();

// Get total active check-ins across all boats
const allActiveCheckIns = await getAllActiveCheckIns();

// Calculate statistics
const totalBoats = boats.length;
const availableBoats = boatStatuses.filter(b => b.status === 'operational').length;
const activeCheckIns = allActiveCheckIns.length;
const maintenanceBoats = boatStatuses.filter(b => b.status === 'maintenance').length;
const outOfServiceBoats = boatStatuses.filter(b => b.status === 'out_of_service').length;
---

<Layout title="Admin Dashboard - Ymir Sailing Club" lang="en">
  <Navigation />
  
  <main>
    <!-- Hero Section -->
    <section class="bg-gradient-to-br from-ocean-green to-green-600 text-white py-20">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <div class="flex justify-between items-center mb-6">
          <div></div>
          <h1 class="text-5xl font-bold">
            Admin Dashboard
          </h1>
          <div class="admin-info flex items-center space-x-4">
            <button 
              id="testNotificationBtn"
              class="px-4 py-2 bg-yellow-600 bg-opacity-20 rounded-lg hover:bg-opacity-30 transition-colors text-sm"
            >
              🧪 Test Notifications
            </button>
            <span class="text-sm">Logged in as Admin</span>
            <a 
              href="/en/admin-login" 
              class="px-4 py-2 bg-white bg-opacity-20 rounded-lg hover:bg-opacity-30 transition-colors text-sm"
            >
              Logout
            </a>
          </div>
        </div>
        <p class="text-xl mb-8 max-w-3xl mx-auto">
          Monitor club activity, manage boats, and track member engagement.
        </p>
      </div>
    </section>

    <!-- Dashboard Content -->
    <section class="py-16 bg-white">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Quick Stats -->
        <div class="grid md:grid-cols-3 gap-6 mb-8">
          <div class="bg-white rounded-lg shadow-lg p-6 border-l-4 border-blue-500">
            <div class="flex items-center">
              <div class="flex-1">
                <p class="text-sm font-medium text-gray-600">Total Boats</p>
                <p class="text-2xl font-bold text-gray-900">{totalBoats}</p>
              </div>
              <div class="text-blue-500">
                <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>
              </div>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow-lg p-6 border-l-4 border-orange-500">
            <a href="/en/admin-check-ins" class="block hover:bg-orange-50 transition-colors rounded-lg p-2 -m-2">
            <div class="flex items-center">
              <div class="flex-1">
                <p class="text-sm font-medium text-gray-600">On the Water</p>
                <p class="text-2xl font-bold text-gray-900">{activeCheckIns}</p>
              </div>
              <div class="text-orange-500">
                <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
            </a>
          </div>
          
          <div class="bg-white rounded-lg shadow-lg p-6 border-l-4 border-purple-500">
            <div class="flex items-center">
              <div class="flex-1">
                <p class="text-sm font-medium text-gray-600">Members</p>
                <p class="text-2xl font-bold text-gray-900">{members.length}</p>
              </div>
              <div class="text-purple-500">
                <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
          <h3 class="text-xl font-bold text-ocean-green mb-6">Quick Actions</h3>
          <div class="grid md:grid-cols-3 gap-4">
            <a href="/en/members" class="flex items-center p-4 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors">
              <div class="text-blue-500 mr-4">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
              </div>
              <div>
                <h4 class="font-semibold text-gray-900">Edit Members</h4>
                <p class="text-sm text-gray-600">Manage club members and view PINs</p>
              </div>
            </a>
            
            <a href="/en/admin" class="flex items-center p-4 bg-green-50 rounded-lg hover:bg-green-100 transition-colors">
              <div class="text-green-500 mr-4">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div>
                <h4 class="font-semibold text-gray-900">Manage Boats</h4>
                <p class="text-sm text-gray-600">Update boat status and settings</p>
              </div>
            </a>
            
            <a href="/en/admin-check-ins" class="flex items-center p-4 bg-indigo-50 rounded-lg hover:bg-indigo-100 transition-colors">
              <div class="text-indigo-500 mr-4">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div>
                <h4 class="font-semibold text-gray-900">Active Boats</h4>
                <p class="text-sm text-gray-600">Monitor and force check-in overdue boats</p>
              </div>
            </a>
            
            <a href="/en/admin-maintenance" class="flex items-center p-4 bg-red-50 rounded-lg hover:bg-red-100 transition-colors">
              <div class="text-red-500 mr-4">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
              <div>
                <h4 class="font-semibold text-gray-900">Maintenance</h4>
                <p class="text-sm text-gray-600">Track and manage boat issues</p>
              </div>
            </a>
            
            <a href="/en/admin-qr-codes" class="flex items-center p-4 bg-yellow-50 rounded-lg hover:bg-yellow-100 transition-colors">
              <div class="text-yellow-500 mr-4">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V6a1 1 0 00-1-1H5a1 1 0 00-1 1v1a1 1 0 001 1zm12 0h2a1 1 0 001-1V6a1 1 0 00-1-1h-2a1 1 0 00-1 1v1a1 1 0 001 1zM5 20h2a1 1 0 001-1v-1a1 1 0 00-1-1H5a1 1 0 00-1 1v1a1 1 0 001 1z"></path>
                </svg>
              </div>
              <div>
                <h4 class="font-semibold text-gray-900">Manage QR Codes</h4>
                <p class="text-sm text-gray-600">Upload and manage boat QR codes</p>
              </div>
            </a>
          </div>
          
          <!-- Quick Export Buttons -->
          <div class="mt-6 pt-6 border-t border-gray-200">
            <h4 class="text-lg font-semibold text-gray-900 mb-4">Quick Exports</h4>
            <div class="grid md:grid-cols-4 gap-3">
              <button data-export-type="members" data-export-format="json" class="export-btn flex items-center justify-center p-3 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors text-sm">
                <svg class="w-4 h-4 text-blue-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
                <span class="export-text">Members JSON</span>
              </button>
              <button data-export-type="boats" data-export-format="json" class="export-btn flex items-center justify-center p-3 bg-green-50 rounded-lg hover:bg-green-100 transition-colors text-sm">
                <svg class="w-4 h-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>
                <span class="export-text">Boats JSON</span>
              </button>
              <button data-export-type="complete" data-export-format="json" class="export-btn flex items-center justify-center p-3 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors text-sm">
                <svg class="w-4 h-4 text-purple-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <span class="export-text">Complete JSON</span>
              </button>
              <button data-export-type="complete" data-export-format="csv" class="export-btn flex items-center justify-center p-3 bg-indigo-50 rounded-lg hover:bg-indigo-100 transition-colors text-sm">
                <svg class="w-4 h-4 text-indigo-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <span class="export-text">Complete CSV</span>
              </button>
            </div>
          </div>
        </div>

        <!-- Alerts -->
        {overdueBoats.length > 0 && (
          <div class="mb-8 bg-red-50 border border-red-200 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-red-900 mb-4">⚠️ Overdue Boats ({overdueBoats.length})</h3>
            <div class="space-y-2">
              {overdueBoats.map((boat) => (
                <div class="flex justify-between items-center bg-red-100 p-3 rounded">
                  <div>
                    <span class="font-semibold">{boat.boat_name}</span> - {boat.sailor_name}
                  </div>
                  <div class="text-sm text-red-700">
                    Expected: {new Date(boat.expected_return).toLocaleString()}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        <!-- Main Dashboard Grid -->
        <div class="grid lg:grid-cols-2 gap-8">
          <!-- Boat Status Overview -->
          <div class="bg-sail-white rounded-lg p-6 shadow-lg">
            <h3 class="text-xl font-bold text-ocean-green mb-6">Boat Status Overview</h3>
            <div class="space-y-4 max-h-96 overflow-y-auto">
              {boatStatuses.map((boat) => (
                <div class="border rounded-lg p-4">
                  <div class="flex justify-between items-start mb-2">
                    <div>
                      <h4 class="font-semibold">{boat.name}</h4>
                      <p class="text-sm text-gray-600">ID: {boat.id}</p>
                      {boat.boat_type && (
                        <p class="text-xs text-gray-500">
                          Type: {boat.boat_type === 'shared' ? 'Shared' : 'Individual'}
                        </p>
                      )}
                    </div>
                    <div class="text-right">
                      <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        boat.status === 'operational' ? 'bg-green-100 text-green-800' :
                        boat.status === 'maintenance' ? 'bg-yellow-100 text-yellow-800' :
                        boat.status === 'checked_out' ? 'bg-blue-100 text-blue-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {boat.status === 'operational' ? 'Operational' :
                         boat.status === 'maintenance' ? 'Maintenance' :
                         boat.status === 'checked_out' ? 'Active' :
                         'Out of Service'}
                      </span>
                    </div>
                  </div>
                  
                  {boat.activeCheckIns.length > 0 && (
                    <div class="text-sm text-blue-600">
                      {boat.boat_type === 'shared' ? (
                        <div>
                          <div class="font-medium mb-1">Active check-ins ({boat.activeCheckIns.length}):</div>
                          {boat.activeCheckIns.map((checkIn, index) => (
                            <div class="text-xs ml-2 mb-1">
                              {checkIn.sailor_name} - Expected back: {new Date(checkIn.expected_return).toLocaleString()}
                            </div>
                          ))}
                        </div>
                      ) : (
                        `Currently checked out by: ${boat.activeCheckIns[0].sailor_name}`
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>

          <!-- Recent Activity -->
          <div class="bg-sail-white rounded-lg p-6 shadow-lg">
            <h3 class="text-xl font-bold text-ocean-green mb-6">Recent Activity</h3>
            <div class="space-y-3 max-h-96 overflow-y-auto">
              {notifications.map((notification) => (
                <div class="border-l-4 border-ocean-green pl-4 py-2">
                  <div class="flex justify-between items-start">
                    <div class="flex-1">
                      <p class="text-sm font-medium">{notification.message}</p>
                      <p class="text-xs text-gray-500">
                        {new Date(notification.sent_at).toLocaleString()}
                      </p>
                    </div>
                    <span class={`px-2 py-1 rounded text-xs ${
                      notification.type === 'check_out' ? 'bg-blue-100 text-blue-800' :
                      notification.type === 'check_in' ? 'bg-green-100 text-green-800' :
                      notification.type === 'status_change' ? 'bg-yellow-100 text-yellow-800' :
                      notification.type === 'time_extension' ? 'bg-purple-100 text-purple-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {notification.type.replace('_', ' ')}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <!-- Maintenance Summary -->
        {(maintenanceBoats > 0 || outOfServiceBoats > 0) && (
          <div class="mt-8 bg-yellow-50 border border-yellow-200 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-yellow-900 mb-4">Maintenance Summary</h3>
            <div class="grid md:grid-cols-2 gap-4">
              {maintenanceBoats > 0 && (
                <div class="bg-yellow-100 p-4 rounded">
                  <p class="font-medium text-yellow-900">Boats Under Maintenance: {maintenanceBoats}</p>
                  <div class="mt-2 space-y-1">
                    {boatStatuses.filter(b => b.status === 'maintenance').map(boat => (
                      <p class="text-sm text-yellow-800">• {boat.name}</p>
                    ))}
                  </div>
                </div>
              )}
              
              {outOfServiceBoats > 0 && (
                <div class="bg-red-100 p-4 rounded">
                  <p class="font-medium text-red-900">Boats Out of Service: {outOfServiceBoats}</p>
                  <div class="mt-2 space-y-1">
                    {boatStatuses.filter(b => b.status === 'out_of_service').map(boat => (
                      <p class="text-sm text-red-800">• {boat.name}</p>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        <!-- Notification Management -->
        <div class="mt-8 bg-gray-50 border border-gray-200 rounded-lg p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Notification Management</h3>
          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <h4 class="font-medium text-gray-700 mb-3">Current Status</h4>
              <div id="notification-stats" class="space-y-2">
                <div class="flex justify-between">
                  <span class="text-sm text-gray-600">Total Notifications:</span>
                  <span class="text-sm font-medium" id="total-notifications">Loading...</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-sm text-gray-600">Oldest Notification:</span>
                  <span class="text-sm font-medium" id="oldest-notification">Loading...</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-sm text-gray-600">Newest Notification:</span>
                  <span class="text-sm font-medium" id="newest-notification">Loading...</span>
                </div>
              </div>
            </div>
            
            <div>
              <h4 class="font-medium text-gray-700 mb-3">Cleanup Options</h4>
              <div class="space-y-3">
                <div>
                  <label class="block text-sm text-gray-600 mb-1">Retention Period (days):</label>
                  <select id="retention-days" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-ocean-green focus:border-transparent">
                    <option value="7">7 days</option>
                    <option value="14">14 days</option>
                    <option value="30" selected>30 days</option>
                    <option value="60">60 days</option>
                    <option value="90">90 days</option>
                  </select>
                </div>
                <button 
                  onclick="cleanupNotifications()" 
                  class="w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm"
                >
                  🗑️ Cleanup Old Notifications
                </button>
                <p class="text-xs text-gray-500">
                  This will permanently delete notifications older than the selected retention period.
                </p>
                
                <!-- Test Notification Buttons -->
                <div class="mt-4 pt-4 border-t border-gray-200">
                  <h5 class="font-medium text-gray-700 mb-2">Test Notifications</h5>
                  <div class="space-y-2">
                    <button 
                      id="testNotificationBtn" 
                      class="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
                    >
                      🔔 Test Push Notification
                    </button>
                    <button 
                      id="testNotificationSystemBtn" 
                      class="w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm"
                    >
                      🔍 Test Notification System
                    </button>
                  </div>
                  <p class="text-xs text-gray-500 mt-1">
                    Test individual notifications or run the full notification check system.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <script>
    // Check if user is logged in as admin
    function checkAdminAuth() {
      const adminMember = localStorage.getItem('adminMember');
      console.log('Admin member from localStorage:', adminMember);
      
      if (!adminMember) {
        console.log('No admin member found, redirecting to login');
        // Redirect to admin login if not authenticated
        window.location.href = '/en/admin-login?returnUrl=' + encodeURIComponent(window.location.pathname);
        return;
      }
      
      try {
        const member = JSON.parse(adminMember);
        console.log('Parsed admin member:', member);
        // Update the header to show admin info
        const adminInfo = document.querySelector('.admin-info');
        if (adminInfo) {
          adminInfo.innerHTML = `
            <span class="text-sm">Logged in as: ${member.name} (${member.member_number})</span>
            <button 
              onclick="logout()" 
              class="px-4 py-2 bg-white bg-opacity-20 rounded-lg hover:bg-opacity-30 transition-colors text-sm"
            >
              Logout
            </button>
          `;
        }
      } catch (error) {
        console.error('Error parsing admin member:', error);
        localStorage.removeItem('adminMember');
        window.location.href = '/en/admin-login?returnUrl=' + encodeURIComponent(window.location.pathname);
      }
    }

    function logout() {
      localStorage.removeItem('adminMember');
      window.location.href = '/en/admin-login';
    }
    
    // Make logout globally available
    window.logout = logout;

    // Test notification button - wait for DOM to be ready
    function initializeNotificationButton() {
      const testNotificationBtn = document.getElementById('testNotificationBtn');
      console.log('🔍 Looking for test notification button:', testNotificationBtn);
      
      if (testNotificationBtn) {
        console.log('✅ Test notification button found, adding event listener');
        testNotificationBtn.addEventListener('click', async () => {
        try {
          // Update button to show loading state
          const originalText = testNotificationBtn.innerHTML;
          testNotificationBtn.innerHTML = '⏳ Testing...';
          testNotificationBtn.disabled = true;

          // Check if notifications are supported
          if (!('Notification' in window)) {
            alert('This browser does not support notifications');
            return;
          }

          console.log('🔔 Testing push notifications...');
          console.log('Current permission:', Notification.permission);

          // Check permission
          let permission = Notification.permission;
          if (permission === 'default') {
            console.log('Requesting notification permission...');
            permission = await Notification.requestPermission();
            console.log('Permission result:', permission);
          }

          if (permission === 'granted') {
            console.log('✅ Permission granted, creating notification...');
            
            // Show test notification with enhanced mobile wake-up features
            const notification = new Notification('🧪 Test Notification', {
              body: 'This is a test notification from Ymir Sailing Club!',
              icon: '/icon-192.svg',
              badge: '/icon-192.svg',
              vibrate: [200, 100, 200, 100, 200], // More noticeable vibration
              tag: 'admin-test-notification',
              requireInteraction: true, // Keeps notification visible until user interacts
              silent: false, // Ensures sound plays
              renotify: true, // Allows re-notification
              data: {
                type: 'test',
                timestamp: new Date().toISOString()
              }
            });

            // Add event listeners to the notification
            notification.onclick = function() {
              console.log('Notification clicked!');
              window.focus();
              notification.close();
            };

            notification.onshow = function() {
              console.log('✅ Notification displayed successfully!');
            };

            notification.onerror = function(error) {
              console.error('❌ Notification error:', error);
            };

            // Auto-close after 5 seconds
            setTimeout(() => {
              notification.close();
            }, 5000);

            // Also trigger the notification check API
            try {
              const response = await fetch('/api/notification-check?action=test&memberNumber=1234');
              const result = await response.json();
              
              if (result.success) {
                console.log('✅ Test notification sent via API');
              } else {
                console.log('⚠️ API test failed:', result.error);
              }
            } catch (apiError) {
              console.log('⚠️ API test error:', apiError);
            }

            // Show success message
            alert('✅ Test notification sent! Check your system notifications area (top-right corner on most systems).');
            
          } else {
            console.log('❌ Permission denied:', permission);
            alert('❌ Notification permission denied. Please enable notifications in your browser settings and try again.');
          }
        } catch (error) {
          console.error('❌ Error testing notifications:', error);
          alert('❌ Error testing notifications: ' + error.message);
        } finally {
          // Reset button
          testNotificationBtn.innerHTML = '🔔 Test Push Notification';
          testNotificationBtn.disabled = false;
        }
      });
    } else {
      console.log('❌ Test notification button not found! Check if button exists in HTML');
    }
    }

    // Try to initialize immediately (in case DOM is already ready)
    initializeNotificationButton();
    
    // Also try when DOM is ready (in case it's not ready yet)
    document.addEventListener('DOMContentLoaded', initializeNotificationButton);

    // Test notification system button
    function initializeNotificationSystemButton() {
      const testSystemBtn = document.getElementById('testNotificationSystemBtn');
      console.log('🔍 Looking for test notification system button:', testSystemBtn);
      
      if (testSystemBtn) {
        console.log('✅ Test notification system button found, adding event listener');
        testSystemBtn.addEventListener('click', async () => {
          try {
            const originalText = testSystemBtn.innerHTML;
            testSystemBtn.innerHTML = '⏳ Testing System...';
            testSystemBtn.disabled = true;

            console.log('🔍 Testing admin notification system...');
            
            // Send admin-only test notification
            const response = await fetch('/api/notification-check?action=admin-test');
            const result = await response.json();
            
            if (result.success) {
              console.log('✅ Admin notification test completed');
              alert('✅ Admin notification test completed! Check console for details.');
            } else {
              console.error('❌ Admin notification test failed:', result.error);
              alert('❌ Admin notification test failed: ' + result.error);
            }
            
          } catch (error) {
            console.error('❌ Error testing notification system:', error);
            alert('❌ Error testing notification system: ' + error.message);
          } finally {
            testSystemBtn.innerHTML = '🔍 Test Notification System';
            testSystemBtn.disabled = false;
          }
        });
      } else {
        console.log('❌ Test notification system button not found!');
      }
    }

    // Initialize notification system button
    initializeNotificationSystemButton();
    document.addEventListener('DOMContentLoaded', initializeNotificationSystemButton);

    // Quick export functionality
    async function quickExport(type, format) {
      // Find the button that was clicked
      const button = document.querySelector(`[data-export-type="${type}"][data-export-format="${format}"]`);
      if (!button) {
        console.error('Export button not found');
        return;
      }
      
      const textSpan = button.querySelector('.export-text');
      const originalText = textSpan.textContent;
      
      try {
        // Show loading state
        textSpan.textContent = '⏳ Exporting...';
        button.disabled = true;
        
        const response = await fetch(`/api/admin-enhanced?action=export_data&type=${type}&format=${format}`);
        
        if (response.ok) {
          // Get the filename from the response headers
          const contentDisposition = response.headers.get('Content-Disposition');
          const filename = contentDisposition ? 
            contentDisposition.split('filename=')[1].replace(/"/g, '') : 
            `ymir-${type}-${new Date().toISOString().split('T')[0]}.${format}`;
          
          // Create blob and download
          const blob = await response.blob();
          const url = URL.createObjectURL(blob);
          
          const a = document.createElement('a');
          a.href = url;
          a.download = filename;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
          
          // Show success feedback
          textSpan.textContent = '✅ Exported!';
          setTimeout(() => {
            textSpan.textContent = originalText;
            button.disabled = false;
          }, 2000);
        } else {
          throw new Error('Export failed');
        }
      } catch (error) {
        console.error('Export error:', error);
        
        // Reset button state
        textSpan.textContent = '❌ Failed';
        setTimeout(() => {
          textSpan.textContent = originalText;
          button.disabled = false;
        }, 2000);
        
        alert('Export failed. Please try again.');
      }
    }

    // Add event listeners for export buttons
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('.export-btn').forEach(button => {
        button.addEventListener('click', function() {
          const type = this.dataset.exportType;
          const format = this.dataset.exportFormat;
          quickExport(type, format);
        });
      });
    });

    // Check auth when page loads
    checkAdminAuth();
    
    // Load notification stats
    loadNotificationStats();
    
    // Load notification stats
    async function loadNotificationStats() {
      try {
        const response = await fetch('/api/admin-enhanced?action=notification_stats');
        if (response.ok) {
          const data = await response.json();
          const stats = data.stats;
          
          document.getElementById('total-notifications').textContent = stats.total;
          document.getElementById('oldest-notification').textContent = stats.oldest ? 
            new Date(stats.oldest).toLocaleDateString() : 'None';
          document.getElementById('newest-notification').textContent = stats.newest ? 
            new Date(stats.newest).toLocaleDateString() : 'None';
        }
      } catch (error) {
        console.error('Error loading notification stats:', error);
      }
    }
    
    // Cleanup old notifications
    async function cleanupNotifications() {
      const retentionDays = document.getElementById('retention-days').value;
      
      if (!confirm(`Are you sure you want to delete notifications older than ${retentionDays} days? This action cannot be undone.`)) {
        return;
      }
      
      try {
        const button = event.target;
        const originalText = button.innerHTML;
        button.innerHTML = '⏳ Cleaning up...';
        button.disabled = true;
        
        const response = await fetch(`/api/admin-enhanced?action=cleanup_notifications&days=${retentionDays}`);
        
        if (response.ok) {
          const data = await response.json();
          alert(`Successfully deleted ${data.deletedCount} old notifications.`);
          
          // Reload stats
          loadNotificationStats();
        } else {
          throw new Error('Cleanup failed');
        }
      } catch (error) {
        console.error('Cleanup error:', error);
        alert('Cleanup failed. Please try again.');
      } finally {
        const button = event.target;
        button.innerHTML = '🗑️ Cleanup Old Notifications';
        button.disabled = false;
      }
    }
    
    // Make cleanupNotifications globally available
    window.cleanupNotifications = cleanupNotifications;
  </script>
</Layout> 