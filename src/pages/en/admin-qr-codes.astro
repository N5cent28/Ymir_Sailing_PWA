---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import BackButton from '../../components/BackButton.astro';
import { getAllBoats } from '../../lib/database-postgres.js';

const boats = await getAllBoats();
---

<Layout title="Manage QR Codes - Ymir Sailing Club" lang="en">
  <Navigation />
  
  <main>
    <!-- Hero Section -->
    <section class="bg-gradient-to-br from-ocean-green to-green-600 text-white py-20">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Back Button -->
        <div class="mb-6">
          <BackButton variant="admin" label="Back to Admin" />
        </div>
        
        <div class="text-center">
          <div class="flex justify-between items-center mb-6">
            <div></div>
            <h1 class="text-5xl font-bold">
              Manage QR Codes
            </h1>
            <div class="admin-info flex items-center space-x-4">
              <span class="text-sm">Logged in as Admin</span>
              <a 
                href="/en/admin-login" 
                class="px-4 py-2 bg-white bg-opacity-20 rounded-lg hover:bg-opacity-30 transition-colors text-sm"
              >
                Logout
              </a>
            </div>
          </div>
          <p class="text-xl mb-8 max-w-3xl mx-auto">
            Upload and manage QR code images for each boat. These QR codes will be displayed on the boat management pages.
          </p>
        </div>
      </div>
    </section>

    <!-- QR Code Management -->
    <section class="py-16 bg-white">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Dynamic Boats: Individual -->
        <div class="mb-12">
          <h2 class="text-3xl font-bold text-ocean-green mb-4">Individual Boats</h2>
          <p class="text-gray-600 mb-6">One user at a time - each boat can only be checked out by one person.</p>
          
          <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
            {boats.filter((b: any) => (b.boat_type || 'individual') === 'individual').map((boat: any) => (
              <div class="bg-white border-l-4 border-blue-500 rounded-lg shadow-lg p-6">
                <h3 class="text-xl font-semibold text-ocean-green mb-2">{boat.name}</h3>
                <p class="text-sm text-gray-600 mb-2">ID: {boat.id}</p>
                <span class="inline-block px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full mb-4">Individual</span>
                
                <div class="mb-4">
                  <label class="block text-sm font-medium text-gray-700 mb-2">QR Code Image</label>
                  <div id={`qr-preview-${boat.id}`} class="w-32 h-32 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center bg-gray-50 mb-2">
                    <span class="text-gray-400 text-sm">No QR Code</span>
                  </div>
                  <input 
                    type="file" 
                    id={`qr-upload-${boat.id}`} 
                    accept="image/*" 
                    class="hidden"
                    data-boat-id={boat.id}
                    data-boat-name={boat.name}
                  />
                  <button 
                    onclick={`document.getElementById('qr-upload-${boat.id}').click()`}
                    class="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
                  >
                    Upload QR Code
                  </button>
                </div>
                
                <div class="space-y-2">
                  <p class="text-xs text-gray-600">URL: <span class="font-mono">/qr/{boat.id}</span></p>
                  <div class="flex space-x-2">
                    <button onclick={`testQRCode('${boat.id}')`} class="flex-1 px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors text-xs">
                      Test
                    </button>
                    <button onclick={`copyURL('/qr/${boat.id}')`} class="flex-1 px-3 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors text-xs">
                      Copy URL
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Dynamic Boats: Shared -->
        <div class="mb-12">
          <h2 class="text-3xl font-bold text-ocean-green mb-4">Shared Boats</h2>
          <p class="text-gray-600 mb-6">Multiple users can check out these boats simultaneously.</p>
          
          <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {boats.filter((b: any) => (b.boat_type || 'individual') === 'shared').map((boat: any) => (
              <div class="bg-white border-l-4 border-green-500 rounded-lg shadow-lg p-6">
                <h3 class="text-xl font-semibold text-ocean-green mb-2">{boat.name}</h3>
                <p class="text-sm text-gray-600 mb-2">ID: {boat.id}</p>
                <span class="inline-block px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full mb-4">Shared</span>
                
                <div class="mb-4">
                  <label class="block text-sm font-medium text-gray-700 mb-2">QR Code Image</label>
                  <div id={`qr-preview-${boat.id}`} class="w-32 h-32 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center bg-gray-50 mb-2">
                    <span class="text-gray-400 text-sm">No QR Code</span>
                  </div>
                  <input 
                    type="file" 
                    id={`qr-upload-${boat.id}`} 
                    accept="image/*" 
                    class="hidden"
                    data-boat-id={boat.id}
                    data-boat-name={boat.name}
                  />
                  <button 
                    onclick={`document.getElementById('qr-upload-${boat.id}').click()`}
                    class="w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm"
                  >
                    Upload QR Code
                  </button>
                </div>
                
                <div class="space-y-2">
                  <p class="text-xs text-gray-600">URL: <span class="font-mono">/qr/{boat.id}</span></p>
                  <div class="flex space-x-2">
                    <button onclick={`testQRCode('${boat.id}')`} class="flex-1 px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors text-xs">
                      Test
                    </button>
                    <button onclick={`copyURL('/qr/${boat.id}')`} class="flex-1 px-3 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors text-xs">
                      Copy URL
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  </main>

  <script>
    // @ts-nocheck
    // Check if user is logged in as admin
    function checkAdminAuth() {
      const adminMember = localStorage.getItem('adminMember');
      
      if (!adminMember) {
        window.location.href = '/en/admin-login?returnUrl=' + encodeURIComponent(window.location.pathname);
        return;
      }
      
      try {
        const member = JSON.parse(adminMember);
        const adminInfo = document.querySelector('.admin-info');
        if (adminInfo) {
          adminInfo.innerHTML = `
            <span class="text-sm">Logged in as: ${member.name} (${member.memberNumber})</span>
            <button 
              onclick="logout()" 
              class="px-4 py-2 bg-white bg-opacity-20 rounded-lg hover:bg-opacity-30 transition-colors text-sm"
            >
              Logout
            </button>
          `;
        }
      } catch (error) {
        console.error('Error parsing admin member:', error);
        localStorage.removeItem('adminMember');
        window.location.href = '/en/admin-login?returnUrl=' + encodeURIComponent(window.location.pathname);
      }
    }

    function logout() {
      localStorage.removeItem('adminMember');
      window.location.href = '/en/admin-login';
    }

    // Handle file uploads
    document.addEventListener('DOMContentLoaded', function() {
      const fileInputs = document.querySelectorAll('input[type="file"]');
      
      fileInputs.forEach(input => {
        input.addEventListener('change', function(e) {
          const file = (e.target && e.target.files) ? e.target.files[0] : null;
          if (file) {
            uploadQRCode(this.dataset.boatId, this.dataset.boatName, file);
          }
        });
      });
    });

    // Upload QR code image
    async function uploadQRCode(boatId, boatName, file) {
      const formData = new FormData();
      formData.append('qrCode', file);
      formData.append('boatId', boatId);
      formData.append('boatName', boatName);

      try {
        const response = await fetch('/api/upload-qr-code', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (result.success) {
          // Update the preview
          const preview = document.getElementById(`qr-preview-${boatId}`);
          const reader = new FileReader();
          reader.onload = function(e) {
            if (preview) {
              preview.innerHTML = `<img src="${e.target.result}" alt="QR Code for ${boatName}" class="w-full h-full object-contain rounded">`;
            }
          };
          reader.readAsDataURL(file);
          
          alert(`QR code uploaded successfully for ${boatName}!`);
        } else {
          alert('Failed to upload QR code: ' + result.error);
        }
      } catch (error) {
        console.error('Error uploading QR code:', error);
        alert('Error uploading QR code. Please try again.');
      }
    }

    // Helpers to build correct absolute URL for current environment
    function getBoatUrl(boatId) {
      return `${window.location.origin}/qr/${boatId}`;
    }

    // Test QR code URL
    window.testQRCode = function(boatId) {
      const url = getBoatUrl(boatId);
      window.open(url, '_blank');
    }

    // Copy URL to clipboard
    window.copyURL = function(url) {
      // Normalize any hardcoded localhost URLs to current origin
      try {
        const u = new URL(url, window.location.origin);
        if (u.host.includes('localhost')) {
          url = `${window.location.origin}${u.pathname}`;
        }
      } catch (_) {
        // If not a full URL, treat as path
        if (url.startsWith('/')) {
          url = `${window.location.origin}${url}`;
        }
      }

      navigator.clipboard.writeText(url).then(() => {
        alert('URL copied to clipboard!');
      }).catch(() => {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = url;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        alert('URL copied to clipboard!');
      });
    }

    // Load existing QR codes on page load
    async function loadExistingQRCodes() {
      try {
        const response = await fetch('/api/qr-codes');
        const result = await response.json();
        
        if (result.success) {
          result.qrCodes.forEach(qrCode => {
            const preview = document.getElementById(`qr-preview-${qrCode.boat_id}`);
            if (preview) {
              const src = qrCode.qr_code_url || '';
              if (src.startsWith('data:') || src.startsWith('http')) {
                preview.innerHTML = `<img src="${src}" alt="QR Code for ${qrCode.boat_name || ''}" class="w-full h-full object-contain rounded">`;
              }
            }
          });
        }
      } catch (error) {
        console.error('Error loading QR codes:', error);
      }
    }

    // Replace any hardcoded localhost URLs in the visible labels with current origin
    function normalizeDisplayedUrls() {
      document.querySelectorAll('p.text-xs span.font-mono').forEach((el) => {
        const text = el.textContent || '';
        if (text.includes('/qr/')) {
          try {
            const u = new URL(text, window.location.origin);
            el.textContent = `${window.location.origin}${u.pathname}`;
          } catch (_) {
            // If plain path like /qr/boat-1
            el.textContent = `${window.location.origin}${text.startsWith('/') ? '' : '/'}${text}`;
          }
        }
      });
    }

    // Check auth and load QR codes when page loads
    checkAdminAuth();
    loadExistingQRCodes();
    normalizeDisplayedUrls();
  </script>
</Layout> 