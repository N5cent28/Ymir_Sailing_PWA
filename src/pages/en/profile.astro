---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import BackButton from '../../components/BackButton.astro';
---

<Layout title="My Profile - Ymir Sailing Club" lang="en">
  <Navigation />
  
  <main>
    <!-- Hero Section -->
    <section class="bg-gradient-to-br from-ocean-blue to-blue-600 text-white py-20">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Back Button -->
        <div class="mb-6">
          <BackButton variant="profile" label="Back to Info" />
        </div>
        
        <div class="text-center">
          <h1 class="text-5xl font-bold mb-6" id="pageTitle">
            My Sailing Profile
          </h1>
          <p class="text-xl mb-8 max-w-3xl mx-auto" id="pageDescription">
            Track your sailing adventures, connect with fellow sailors, and share your experiences.
          </p>
        </div>
      </div>
    </section>

    <!-- Profile Section -->
    <section class="py-16 bg-white">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Member Login -->
        <div id="loginSection" class="bg-white rounded-lg shadow-lg p-8 mb-8">
          <h2 class="text-2xl font-bold text-ocean-blue mb-6">Access Your Profile</h2>
          
          <form id="loginForm" class="space-y-4">
            <div>
              <label for="memberNumber" class="block text-sm font-medium text-anchor-gray mb-2">
                Member Number
              </label>
              <input
                type="text"
                id="memberNumber"
                name="memberNumber"
                required
                placeholder="Enter your member number"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-ocean-blue"
              />
            </div>
            
            <div>
              <label for="pin" class="block text-sm font-medium text-anchor-gray mb-2">
                3-Digit PIN
              </label>
              <input
                type="password"
                id="pin"
                name="pin"
                required
                maxlength="3"
                placeholder="Enter your 3-digit PIN"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-ocean-blue"
              />
            </div>
            
            <button
              type="submit"
              class="w-full px-6 py-3 bg-ocean-blue text-white rounded-lg hover:bg-blue-700 transition-colors font-semibold"
            >
              Access Profile
            </button>
          </form>
          
          <!-- Success/Error Messages -->
          <div id="message" class="mt-4 p-3 rounded-lg hidden"></div>
        </div>

        <!-- Other Member Profile View -->
        <div id="otherMemberSection" class="bg-white rounded-lg shadow-lg p-8 mb-8 hidden">
          <div class="text-center mb-6">
            <div class="w-24 h-24 bg-ocean-blue rounded-full flex items-center justify-center text-white text-2xl font-bold overflow-hidden mx-auto mb-4" id="otherMemberAvatar">
              <img id="otherMemberImage" src="" alt="Profile photo" class="w-full h-full object-cover hidden">
              <span id="otherMemberInitials"></span>
            </div>
            <h2 class="text-3xl font-bold text-ocean-blue" id="otherMemberName"></h2>
            <p class="text-sm text-gray-500 mt-2" id="otherMemberBio">No bio yet</p>
          </div>
          
          <!-- Stats Cards -->
          <div class="grid md:grid-cols-2 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-lg p-6 text-center">
              <div class="text-3xl font-bold text-ocean-blue" id="otherMemberTrips">0</div>
              <div class="text-anchor-gray">Total Trips</div>
            </div>
            <div class="bg-white rounded-lg shadow-lg p-6 text-center">
              <div class="text-3xl font-bold text-ocean-blue" id="otherMemberHours">0</div>
              <div class="text-anchor-gray">Hours Sailed</div>
            </div>
          </div>

          <!-- Navigation Tabs -->
          <div class="bg-white rounded-lg shadow-lg mb-8">
            <div class="border-b border-gray-200">
              <nav class="flex space-x-8 px-6">
                <button class="other-tab-btn active py-4 px-1 border-b-2 border-ocean-blue text-ocean-blue font-medium" data-tab="trips">
                  Recent Trips
                </button>
                <button class="other-tab-btn py-4 px-1 border-b-2 border-transparent text-anchor-gray hover:text-ocean-blue font-medium" data-tab="hours">
                  Boat Hours
                </button>
                <button class="other-tab-btn py-4 px-1 border-b-2 border-transparent text-anchor-gray hover:text-ocean-blue font-medium" data-tab="photos">
                  Trip Photos
                </button>
              </nav>
            </div>

            <!-- Tab Content -->
            <div class="p-6">
              <!-- Trips Tab -->
              <div id="otherTripsTab" class="other-tab-content active">
                <h3 class="text-xl font-semibold mb-4">Recent Sailing Trips</h3>
                <div id="otherTripsList" class="space-y-4">
                  <!-- Trips will be populated here -->
                </div>
              </div>

              <!-- Boat Hours Tab -->
              <div id="otherHoursTab" class="other-tab-content hidden">
                <h3 class="text-xl font-semibold mb-4">Boat Hours Summary</h3>
                <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
                  <div class="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-6 text-center">
                    <div class="text-3xl font-bold text-blue-600 mb-2" id="otherSoloDinghyHours">0</div>
                    <div class="text-blue-800 font-medium">Solo Dinghy</div>
                    <div class="text-sm text-blue-600 mt-1">Zests, Lasers</div>
                  </div>
                  <div class="bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-6 text-center">
                    <div class="text-3xl font-bold text-green-600 mb-2" id="otherDinghyHours">0</div>
                    <div class="text-green-800 font-medium">Dinghy</div>
                    <div class="text-sm text-green-600 mt-1">Quests, Topaz</div>
                  </div>
                  <div class="bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-6 text-center">
                    <div class="text-3xl font-bold text-purple-600 mb-2" id="otherKeelboatHours">0</div>
                    <div class="text-purple-800 font-medium">Keelboat</div>
                    <div class="text-sm text-purple-600 mt-1">Coming soon!</div>
                  </div>
                  <div class="bg-gradient-to-br from-orange-50 to-orange-100 rounded-lg p-6 text-center">
                    <div class="text-3xl font-bold text-orange-600 mb-2" id="otherPaddlingHours">0</div>
                    <div class="text-orange-800 font-medium">Paddling</div>
                    <div class="text-sm text-orange-600 mt-1">Kayaks & paddle boards</div>
                  </div>
                </div>
                <div class="bg-white border rounded-lg p-6">
                  <h4 class="text-lg font-semibold mb-4">Active Checkout</h4>
                  <div id="otherActiveCheckoutContent">
                    <div class="text-center py-8">
                      <div class="text-4xl mb-4">üö§</div>
                      <p class="text-anchor-gray text-lg">No active crafts</p>
                      <p class="text-sm text-gray-500 mt-2">This member doesn't currently have any boats checked out</p>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Photos Tab -->
              <div id="otherPhotosTab" class="other-tab-content hidden">
                <h3 class="text-xl font-semibold mb-4">Trip Photos</h3>
                <div id="otherPhotosGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  <!-- Photos will be populated here -->
                </div>
              </div>
            </div>
          </div>

          <!-- Back to Find Members -->
          <div class="text-center">
            <a href="/en/find-members" class="inline-flex items-center px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors font-semibold">
              ‚Üê Back to Find Members
            </a>
          </div>
        </div>

        <!-- Profile Content -->
        <div id="profileContent" class="hidden">
          <!-- Profile Header -->
          <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
            <div class="flex items-center space-x-6">
              <div class="relative">
                <div class="w-24 h-24 bg-ocean-blue rounded-full flex items-center justify-center text-white text-2xl font-bold overflow-hidden" id="profileAvatar">
                  <img id="profileImage" src="" alt="Profile photo" class="w-full h-full object-cover hidden">
                  <span id="profileInitials"></span>
                </div>
                <button
                  id="uploadProfilePhotoBtn"
                  class="absolute -bottom-1 -right-1 w-8 h-8 bg-ocean-blue text-white rounded-full flex items-center justify-center hover:bg-blue-700 transition-colors text-sm"
                  title="Upload profile photo"
                >
                  üì∑
                </button>
                <input
                  type="file"
                  id="profilePhotoInput"
                  accept="image/*"
                  class="hidden"
                />
              </div>
              <div class="flex-1">
                <h2 class="text-3xl font-bold text-ocean-blue" id="profileName"></h2>
                <p class="text-anchor-gray" id="profileMemberNumber"></p>
                <p class="text-sm text-gray-500 mt-2" id="profileBio">No bio yet</p>
                <div class="flex space-x-3 mt-4">
                  <button id="editProfileBtn" class="px-4 py-2 bg-ocean-blue text-white rounded-lg hover:bg-blue-700 transition-colors">
                    Edit Profile
                  </button>
                  <a href="/en/find-members" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                    Find Members
                  </a>
                  <button onclick="logout()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                    Logout
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Stats Cards -->
          <div class="grid md:grid-cols-2 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-lg p-6 text-center">
              <div class="text-3xl font-bold text-ocean-blue" id="totalTrips">0</div>
              <div class="text-anchor-gray">Total Trips</div>
            </div>
            <div class="bg-white rounded-lg shadow-lg p-6 text-center">
              <div class="text-3xl font-bold text-ocean-blue" id="totalHours">0</div>
              <div class="text-anchor-gray">Hours Sailed</div>
            </div>
          </div>

          <!-- Navigation Tabs -->
          <div class="bg-white rounded-lg shadow-lg mb-8">
            <div class="border-b border-gray-200">
              <nav class="flex space-x-8 px-6">
                <button class="tab-btn active py-4 px-1 border-b-2 border-ocean-blue text-ocean-blue font-medium" data-tab="hours">
                  Boat Hours
                </button>
                <button class="tab-btn py-4 px-1 border-b-2 border-transparent text-anchor-gray hover:text-ocean-blue font-medium" data-tab="trips">
                  My Trips
                </button>
                <button class="tab-btn py-4 px-1 border-b-2 border-transparent text-anchor-gray hover:text-ocean-blue font-medium" data-tab="photos">
                  Trip Photos
                </button>
                <button class="tab-btn py-4 px-1 border-b-2 border-transparent text-anchor-gray hover:text-ocean-blue font-medium" data-tab="messages">
                  Messages
                  <span id="messagesBadge" class="ml-2 bg-red-500 text-white text-xs rounded-full px-2 py-1 hidden">0</span>
                </button>
              </nav>
            </div>

            <!-- Tab Content -->
            <div class="p-6">
              <!-- Boat Hours Tab -->
              <div id="hoursTab" class="tab-content active">
                <h3 class="text-xl font-semibold mb-4">Boat Hours Summary</h3>
                <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
                  <div class="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-6 text-center">
                    <div class="text-3xl font-bold text-blue-600 mb-2" id="soloDinghyHours">0</div>
                    <div class="text-blue-800 font-medium">Solo Dinghy</div>
                    <div class="text-sm text-blue-600 mt-1">Zests, Lasers</div>
                  </div>
                  <div class="bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-6 text-center">
                    <div class="text-3xl font-bold text-green-600 mb-2" id="dinghyHours">0</div>
                    <div class="text-green-800 font-medium">Dinghy</div>
                    <div class="text-sm text-green-600 mt-1">Quests, Topaz</div>
                  </div>
                  <div class="bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-6 text-center">
                    <div class="text-3xl font-bold text-purple-600 mb-2" id="keelboatHours">0</div>
                    <div class="text-purple-800 font-medium">Keelboat</div>
                    <div class="text-sm text-purple-600 mt-1">Coming soon!</div>
                  </div>
                  <div class="bg-gradient-to-br from-orange-50 to-orange-100 rounded-lg p-6 text-center">
                    <div class="text-3xl font-bold text-orange-600 mb-2" id="paddlingHours">0</div>
                    <div class="text-orange-800 font-medium">Paddling</div>
                    <div class="text-sm text-orange-600 mt-1">Kayaks & paddle boards</div>
                  </div>
                </div>
                <div class="bg-white border rounded-lg p-6">
                  <h4 class="text-lg font-semibold mb-4">My Active Checkout</h4>
                  <div id="activeCheckoutContent">
                    <div class="text-center py-8">
                      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-ocean-blue mx-auto mb-4"></div>
                      <p class="text-anchor-gray">Loading active checkout...</p>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Trips Tab -->
              <div id="tripsTab" class="tab-content hidden">
                <h3 class="text-xl font-semibold mb-4">Recent Sailing Trips</h3>
                <div id="tripsList" class="space-y-4">
                  <!-- Trips will be populated here -->
                </div>
              </div>

              <!-- Photos Tab -->
              <div id="photosTab" class="tab-content hidden">
                <h3 class="text-xl font-semibold mb-4">Trip Photos</h3>
                
                <!-- Photo Upload Section -->
                <div class="bg-gray-50 rounded-lg p-6 mb-6">
                  <h4 class="text-lg font-medium mb-4">Add New Photo</h4>
                  <form id="photoUploadForm" class="space-y-4">
                    <div>
                      <label for="photoFile" class="block text-sm font-medium text-gray-700 mb-2">
                        Select Photo (Max 3 photos, 5MB each)
                      </label>
                      <input
                        type="file"
                        id="photoFile"
                        accept="image/*"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-ocean-blue"
                        required
                      />
                      <p class="text-xs text-gray-500 mt-1">
                        Supported formats: JPEG, PNG, WebP. Images will be compressed automatically.
                      </p>
                    </div>
                    
                    <div>
                      <label for="photoCaption" class="block text-sm font-medium text-gray-700 mb-2">
                        Caption (optional)
                      </label>
                      <textarea
                        id="photoCaption"
                        rows="2"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-ocean-blue"
                        placeholder="Describe your sailing adventure..."
                      ></textarea>
                    </div>
                    
                    <div class="flex items-center justify-between">
                      <button
                        type="submit"
                        class="px-4 py-2 bg-ocean-blue text-white rounded-md hover:bg-blue-700 transition-colors"
                      >
                        Upload Photo
                      </button>
                      <span id="photoCount" class="text-sm text-gray-600">0/3 photos</span>
                    </div>
                  </form>
                  
                  <!-- Upload Progress -->
                  <div id="uploadProgress" class="hidden mt-4">
                    <div class="bg-blue-100 rounded-full h-2">
                      <div id="progressBar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                    </div>
                    <p id="progressText" class="text-sm text-gray-600 mt-2">Processing image...</p>
                  </div>
                </div>
                
                <div id="photosGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  <!-- Photos will be populated here -->
                </div>
              </div>

              <!-- Find Members Tab -->
              <div id="membersTab" class="tab-content hidden">
                <h3 class="text-xl font-semibold mb-4">Find Members</h3>
                
                <!-- Search Section -->
                <div class="bg-gray-50 rounded-lg p-6 mb-6">
                  <h4 class="text-lg font-medium mb-4">Search Members</h4>
                  <div class="flex flex-col md:flex-row gap-4">
                    <div class="flex-1">
                      <input
                        type="text"
                        id="memberSearch"
                        placeholder="Search by name (first or last name works)..."
                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-ocean-blue"
                      />
                    </div>
                    <button
                      id="clearSearch"
                      class="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors font-semibold"
                    >
                      Clear Search
                    </button>
                  </div>
                  <p class="text-sm text-gray-600 mt-2">
                    Search by first name, last name, or partial matches. Results update as you type.
                  </p>
                </div>

                <!-- Members Grid -->
                <div class="bg-white rounded-lg p-6 shadow-lg">
                  <div class="flex justify-between items-center mb-6">
                    <h4 class="text-lg font-semibold text-ocean-blue">
                      Club Members (<span id="memberCount">0</span>)
                    </h4>
                    <div class="flex space-x-2">
                      <button
                        id="sortByName"
                        class="px-3 py-1 bg-ocean-blue text-white rounded text-sm hover:bg-blue-700 transition-colors"
                      >
                        Sort by Name
                      </button>
                      <button
                        id="sortByHours"
                        class="px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600 transition-colors"
                      >
                        Sort by Hours
                      </button>
                    </div>
                  </div>
                  
                  <div id="membersGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Members will be populated here -->
                  </div>
                  
                  <div id="noResults" class="hidden text-center py-12">
                    <div class="text-6xl mb-4">üîç</div>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">No members found</h3>
                    <p class="text-gray-600">Try adjusting your search terms or browse all members.</p>
                  </div>
                </div>
              </div>

              <!-- Messages Tab -->
              <div id="messagesTab" class="tab-content hidden">
                <h3 class="text-xl font-semibold mb-4">Messages</h3>
                
                <!-- Messages Container -->
                <div class="bg-white rounded-lg shadow-lg">
                  <!-- Header -->
                  <div class="border-b border-gray-200 p-6">
                    <div class="flex items-center justify-between">
                      <div class="flex items-center space-x-2">
                        <span class="text-sm text-gray-500">Unread:</span>
                        <span class="bg-red-500 text-white text-xs rounded-full px-2 py-1" id="unreadCount">0</span>
                      </div>
                      <div>
                        <h4 class="text-lg font-bold text-ocean-blue" id="chatTitle">
                          Select a member to start messaging
                        </h4>
                        <p class="text-sm text-gray-600" id="chatSubtitle">
                          Choose from the member list below
                        </p>
                      </div>
                    </div>
                  </div>

                  <!-- Messages Area -->
                  <div class="flex h-96">
                    <!-- Members List -->
                    <div class="w-1/3 border-r border-gray-200 bg-gray-50">
                      <div class="p-4 border-b border-gray-200">
                        <h5 class="font-semibold text-gray-900 mb-2">Club Members</h5>
                        <input
                          type="text"
                          id="messageMemberSearch"
                          placeholder="Search members..."
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-ocean-blue"
                        />
                      </div>
                      <div class="overflow-y-auto h-80" id="messagesMembersList">
                        <!-- Members will be loaded here -->
                      </div>
                    </div>

                    <!-- Chat Area -->
                    <div class="flex-1 flex flex-col">
                      <!-- Messages Display -->
                      <div class="flex-1 overflow-y-auto p-4" id="messagesArea">
                        <div class="text-center text-gray-500 py-8">
                          <div class="text-4xl mb-4">üí¨</div>
                          <p>Select a member to start a conversation</p>
                        </div>
                      </div>

                      <!-- Message Input -->
                      <div class="border-t border-gray-200 p-4" id="messageInputContainer" style="display: none;">
                        <div class="flex space-x-2">
                          <input
                            type="text"
                            id="messageInput"
                            placeholder="Type your message..."
                            class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-ocean-blue"
                          />
                          <button
                            id="sendMessageBtn"
                            class="px-4 py-2 bg-ocean-blue text-white rounded-lg hover:bg-blue-700 transition-colors font-semibold"
                          >
                            Send
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Loading State -->
        <div id="loading" class="hidden text-center py-8">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-ocean-blue mx-auto mb-4"></div>
          <p class="text-anchor-gray">Loading your profile...</p>
        </div>

        <!-- Error State -->
        <div id="error" class="hidden">
          <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
            <div class="text-4xl mb-4">‚ùå</div>
            <h3 class="text-lg font-semibold text-red-900 mb-2">Error</h3>
            <p id="errorMessage" class="text-red-800">
              An error occurred. Please try again.
            </p>
          </div>
        </div>
      </div>
    </section>
  </main>

  <!-- Edit Profile Modal -->
  <div id="editProfileModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-2xl font-bold text-ocean-blue">Edit Profile</h3>
            <button id="closeEditModal" class="text-gray-500 hover:text-gray-700 text-2xl">
              √ó
            </button>
          </div>
          
          <!-- Edit Bio Section -->
          <div class="mb-8">
            <h4 class="text-lg font-semibold mb-4">Update Bio</h4>
            <form id="editBioForm" class="space-y-4">
              <div>
                <label for="editBio" class="block text-sm font-medium text-gray-700 mb-2">
                  About Me
                </label>
                <textarea
                  id="editBio"
                  rows="4"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-ocean-blue"
                  placeholder="Tell us about your sailing experience..."
                ></textarea>
              </div>
              <button
                type="submit"
                class="px-4 py-2 bg-ocean-blue text-white rounded-md hover:bg-blue-700 transition-colors"
              >
                Update Bio
              </button>
            </form>
          </div>
          
          <!-- Profile Photo Section -->
          <div class="mb-8">
            <h4 class="text-lg font-semibold mb-4">Profile Photo</h4>
            <div class="flex items-center space-x-4">
              <div class="relative">
                <div class="w-16 h-16 bg-ocean-blue rounded-full flex items-center justify-center text-white text-lg font-bold overflow-hidden" id="modalProfileAvatar">
                  <img id="modalProfileImage" src="" alt="Profile photo" class="w-full h-full object-cover hidden">
                  <span id="modalProfileInitials"></span>
                </div>
              </div>
              <div class="flex-1">
                <p class="text-sm text-gray-600 mb-2">
                  Click the camera icon next to your profile photo to upload a new image.
                </p>
                <button
                  id="removeProfilePhotoBtn"
                  class="px-3 py-1 bg-red-500 text-white rounded text-sm hover:bg-red-600 transition-colors"
                  style="display: none;"
                >
                  Remove Photo
                </button>
              </div>
            </div>
          </div>
          
          <!-- Delete Trips Section -->
          <div class="mb-8">
            <h4 class="text-lg font-semibold mb-4">Manage Trips</h4>
            <div id="tripsToDelete" class="space-y-3 max-h-40 overflow-y-auto">
              <!-- Trips will be populated here -->
            </div>
            <p class="text-sm text-gray-600 mt-2">
              ‚ö†Ô∏è Deleting trips will permanently remove them from your sailing history.
            </p>
          </div>
          
          <!-- Delete Photos Section -->
          <div class="mb-8">
            <h4 class="text-lg font-semibold mb-4">Manage Photos</h4>
            <div id="photosToDelete" class="grid grid-cols-2 md:grid-cols-3 gap-3 max-h-40 overflow-y-auto">
              <!-- Photos will be populated here -->
            </div>
            <p class="text-sm text-gray-600 mt-2">
              ‚ö†Ô∏è Deleting photos will permanently remove them from your trip gallery.
            </p>
          </div>
          
          <!-- Hours Notice -->
          <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div class="flex">
              <div class="text-yellow-600 text-lg mr-3">‚ÑπÔ∏è</div>
              <div>
                <h5 class="font-medium text-yellow-800">Sailing Hours</h5>
                <p class="text-sm text-yellow-700 mt-1">
                  Sailing hours are automatically calculated from your trip data and cannot be manually edited. 
                  Hours are updated when trips are completed.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Import auth functions - using dynamic import for compatibility
    let setUserSession, getCurrentUser, clearUserSession, requireAuth;
    
    // Load auth functions
    import('../../lib/auth.js').then(auth => {
      setUserSession = auth.setUserSession;
      getCurrentUser = auth.getCurrentUser;
      clearUserSession = auth.clearUserSession;
      requireAuth = auth.requireAuth;
      
      // Initialize authentication after auth module is loaded
      checkExistingAuth();
      checkUrlParams();
    }).catch(error => {
      console.error('Failed to load auth module:', error);
    });

    // Initialize authentication
    let currentMemberNumber = null;
    let currentMember = null;

    // Check if user is already logged in
    function checkExistingAuth() {
      const user = getCurrentUser();
      if (user) {
        currentMember = user;
        currentMemberNumber = user.member_number;
        
        // Hide login section and show profile
        document.getElementById('loginSection').classList.add('hidden');
        document.getElementById('profileContent').classList.remove('hidden');
        
        // Load profile data
        loadProfileData(user.member_number);
        
        // Update page title
        document.getElementById('pageTitle').textContent = 'My Sailing Profile';
        document.getElementById('pageDescription').textContent = 'Track your sailing adventures, connect with fellow sailors, and share your experiences.';
      }
    }

    // Check for return URL after login
    function checkReturnUrl() {
      const urlParams = new URLSearchParams(window.location.search);
      const returnUrl = urlParams.get('returnUrl');
      
      if (returnUrl && currentMember) {
        // Clear the return URL from the address bar
        const newUrl = window.location.pathname;
        window.history.replaceState({}, document.title, newUrl);
        
        // Redirect to the return URL
        setTimeout(() => {
          window.location.href = returnUrl;
        }, 1000);
      }
    }

    const memberNumberInput = document.getElementById('memberNumber');
    const pinInput = document.getElementById('pin');
    const loginForm = document.getElementById('loginForm');
    const loginSection = document.getElementById('loginSection');
    const profileContent = document.getElementById('profileContent');
    const loading = document.getElementById('loading');
    const error = document.getElementById('error');
    const errorMessage = document.getElementById('errorMessage');
    const messageDiv = document.getElementById('message');

    // Photo upload elements
    const photoUploadForm = document.getElementById('photoUploadForm');
    const photoFileInput = document.getElementById('photoFile');
    const photoCaptionInput = document.getElementById('photoCaption');
    const photoCountSpan = document.getElementById('photoCount');
    const uploadProgress = document.getElementById('uploadProgress');
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');

    console.log('Photo upload elements found:', {
      photoUploadForm,
      photoFileInput,
      photoCaptionInput,
      photoCountSpan,
      uploadProgress,
      progressBar,
      progressText
    });

    // Profile photo upload elements
    const profilePhotoInput = document.getElementById('profilePhotoInput');
    const uploadProfilePhotoBtn = document.getElementById('uploadProfilePhotoBtn');
    const profileAvatar = document.getElementById('profileAvatar');
    const profileImage = document.getElementById('profileImage');
    const profileInitials = document.getElementById('profileInitials');

    // Photo upload state
    let uploadedPhotos = 0;
    const MAX_PHOTOS = 3;
    const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB

    // Edit profile modal elements
    const editProfileBtn = document.getElementById('editProfileBtn');
    const editProfileModal = document.getElementById('editProfileModal');
    const closeEditModal = document.getElementById('closeEditModal');
    const editBioForm = document.getElementById('editBioForm');
    const editBioTextarea = document.getElementById('editBio');
    const tripsToDelete = document.getElementById('tripsToDelete');
    const photosToDelete = document.getElementById('photosToDelete');
    const removeProfilePhotoBtn = document.getElementById('removeProfilePhotoBtn');
    const modalProfileImage = document.getElementById('modalProfileImage');
    const modalProfileInitials = document.getElementById('modalProfileInitials');
    const modalProfileAvatar = document.getElementById('modalProfileAvatar');

    // Tab functionality
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    tabBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const tabName = btn.dataset.tab;
        
        // Update active tab button
        tabBtns.forEach(b => {
          b.classList.remove('active', 'border-ocean-blue', 'text-ocean-blue');
          b.classList.add('border-transparent', 'text-anchor-gray');
        });
        btn.classList.add('active', 'border-ocean-blue', 'text-ocean-blue');
        btn.classList.remove('border-transparent', 'text-anchor-gray');
        
        // Show active tab content
        tabContents.forEach(content => {
          content.classList.add('hidden');
          content.classList.remove('active');
        });
        document.getElementById(`${tabName}Tab`).classList.remove('hidden');
        document.getElementById(`${tabName}Tab`).classList.add('active');
        
        // Load tab-specific data
        loadTabData(tabName);
      });
    });

    // Tab functionality for other member profiles
    const otherTabBtns = document.querySelectorAll('.other-tab-btn');
    const otherTabContents = document.querySelectorAll('.other-tab-content');

    otherTabBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const tabName = btn.dataset.tab;
        
        // Update active tab button
        otherTabBtns.forEach(b => {
          b.classList.remove('active', 'border-ocean-blue', 'text-ocean-blue');
          b.classList.add('border-transparent', 'text-anchor-gray');
        });
        btn.classList.add('active', 'border-ocean-blue', 'text-ocean-blue');
        btn.classList.remove('border-transparent', 'text-anchor-gray');
        
        // Show active tab content
        otherTabContents.forEach(content => {
          content.classList.add('hidden');
          content.classList.remove('active');
        });
        document.getElementById(`other${tabName.charAt(0).toUpperCase() + tabName.slice(1)}Tab`).classList.remove('hidden');
        document.getElementById(`other${tabName.charAt(0).toUpperCase() + tabName.slice(1)}Tab`).classList.add('active');
      });
    });

    // Edit Profile Modal Event Handlers
    editProfileBtn.addEventListener('click', () => {
      openEditProfileModal();
    });

    closeEditModal.addEventListener('click', () => {
      closeEditProfileModal();
    });

    // Close modal when clicking outside
    editProfileModal.addEventListener('click', (e) => {
      if (e.target === editProfileModal) {
        closeEditProfileModal();
      }
    });

    // Edit bio form submission
    editBioForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      await updateBio();
    });

    // Remove profile photo button
    removeProfilePhotoBtn.addEventListener('click', async () => {
      if (confirm('Are you sure you want to remove your profile photo?')) {
        await removeProfilePhoto();
      }
    });

    // Profile photo upload event listeners
    uploadProfilePhotoBtn.addEventListener('click', () => {
      profilePhotoInput.click();
    });

    profilePhotoInput.addEventListener('change', async (event) => {
      const file = event.target.files[0];
      if (!file) return;

      if (file.size > MAX_FILE_SIZE) {
        showMessage('Profile photo size must be less than 5MB.', 'error');
        return;
      }

      if (!file.type.startsWith('image/')) {
        showMessage('Please select a valid image file for your profile photo.', 'error');
        return;
      }

      showUploadProgress('Compressing profile photo...', 25);
      try {
        const compressedBlob = await compressImage(file);
        const reader = new FileReader();
        reader.onload = async () => {
          const base64Data = reader.result;
          await updateProfilePhoto(base64Data);
        };
        reader.readAsDataURL(compressedBlob);
      } catch (error) {
        console.error('Profile photo upload error:', error);
        showMessage('Failed to upload profile photo. Please try again.', 'error');
      }
    });

    // Photo upload form submission
    photoUploadForm.addEventListener('submit', async (e) => {
      console.log('Photo upload form submitted!');
      e.preventDefault();
      
      console.log('uploadedPhotos:', uploadedPhotos, 'MAX_PHOTOS:', MAX_PHOTOS);
      if (uploadedPhotos >= MAX_PHOTOS) {
        showMessage('Maximum of 3 photos allowed per trip.', 'error');
        return;
      }
      
      const file = photoFileInput.files[0];
      console.log('Selected file:', file);
      if (!file) {
        showMessage('Please select a photo to upload.', 'error');
        return;
      }
      
      console.log('File size:', file.size, 'MAX_FILE_SIZE:', MAX_FILE_SIZE);
      // Check file type first
      console.log('File type:', file.type);
      if (!file.type.startsWith('image/')) {
        showMessage('Please select a valid image file.', 'error');
        return;
      }
      
      console.log('About to call uploadPhoto with caption:', photoCaptionInput.value);
      try {
        await uploadPhoto(file, photoCaptionInput.value);
      } catch (error) {
        console.error('Photo upload error:', error);
        showMessage('Failed to upload photo. Please try again.', 'error');
      }
    });

    // Image compression function
    function compressImage(file, maxWidth = 1200, quality = 0.8) {
      return new Promise((resolve) => {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        const img = new Image();
        
        img.onload = () => {
          // Calculate new dimensions
          let { width, height } = img;
          if (width > maxWidth) {
            height = (height * maxWidth) / width;
            width = maxWidth;
          }
          
          // Set canvas dimensions
          canvas.width = width;
          canvas.height = height;
          
          // Draw and compress image
          ctx.drawImage(img, 0, 0, width, height);
          
          // Adjust quality based on original file size
          let adjustedQuality = quality;
          if (file.size > MAX_FILE_SIZE) {
            // For files larger than 5MB, use more aggressive compression
            const sizeRatio = MAX_FILE_SIZE / file.size;
            adjustedQuality = Math.max(0.3, sizeRatio * quality); // Minimum 30% quality
            console.log('Original file size:', file.size, 'Target size:', MAX_FILE_SIZE, 'Adjusted quality:', adjustedQuality);
          }
          
          // Convert to blob with compression
          canvas.toBlob(resolve, 'image/jpeg', adjustedQuality);
        };
        
        img.src = URL.createObjectURL(file);
      });
    }

    // Photo upload function
    async function uploadPhoto(file, caption) {
      console.log('uploadPhoto called with file:', file.name, 'caption:', caption);
      showUploadProgress('Compressing image...', 25);
      
      // Compress the image
      let compressedBlob = await compressImage(file);
      console.log('Image compressed, blob size:', compressedBlob.size);
      
      // If still too large, compress more aggressively
      if (compressedBlob.size > MAX_FILE_SIZE) {
        console.log('Compressed image still too large, compressing further...');
        showUploadProgress('Further compressing image...', 35);
        
        // Create a new file from the compressed blob and compress again with lower quality
        const tempFile = new File([compressedBlob], file.name, { type: 'image/jpeg' });
        compressedBlob = await compressImage(tempFile, 800, 0.5); // Smaller max width and lower quality
        console.log('Further compressed, blob size:', compressedBlob.size);
      }
      
      showUploadProgress('Uploading photo...', 50);
      
      // Convert blob to base64 for storage (in a real app, you'd upload to a server)
      const reader = new FileReader();
      reader.onload = async () => {
        const base64Data = reader.result;
        console.log('Image converted to base64, length:', base64Data.length);
        
        showUploadProgress('Saving to database...', 75);
        
        try {
          // Get current member from auth system
          const currentUser = getCurrentUser();
          console.log('Current user:', currentUser);
          if (!currentUser) {
            throw new Error('No active member session');
          }
          
          // For demo purposes, we'll use a placeholder check-in ID
          // In a real app, you'd get the actual check-in ID from the current trip
          const checkInId = 1; // Placeholder
          
          console.log('Sending photo to API with checkInId:', checkInId, 'memberNumber:', currentUser.member_number);
          
          const response = await fetch('/api/social', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              action: 'add_trip_photo',
              checkInId: checkInId,
              memberNumber: currentUser.member_number,
              photoUrl: base64Data,
              caption: caption
            }),
          });
          
          const data = await response.json();
          console.log('API response:', data);
          
          if (data.success) {
            showUploadProgress('Photo uploaded successfully!', 100);
            uploadedPhotos++;
            updatePhotoCount();
            
            // Clear form
            photoUploadForm.reset();
            
            // Reload photos
            setTimeout(() => {
              loadTripPhotos(currentUser.member_number);
              hideUploadProgress();
            }, 1000);
            
            showMessage('Photo uploaded successfully!', 'success');
          } else {
            throw new Error(data.error || 'Upload failed');
          }
        } catch (error) {
          console.error('Upload error:', error);
          hideUploadProgress();
          showMessage('Failed to upload photo: ' + error.message, 'error');
        }
      };
      
      reader.readAsDataURL(compressedBlob);
    }

    // Upload progress functions
    function showUploadProgress(text, percentage) {
      uploadProgress.classList.remove('hidden');
      progressText.textContent = text;
      progressBar.style.width = `${percentage}%`;
    }

    function hideUploadProgress() {
      uploadProgress.classList.add('hidden');
      progressBar.style.width = '0%';
    }

    function updatePhotoCount() {
      photoCountSpan.textContent = `${uploadedPhotos}/${MAX_PHOTOS} photos`;
      
      // Disable upload if limit reached
      if (uploadedPhotos >= MAX_PHOTOS) {
        photoFileInput.disabled = true;
        photoUploadForm.querySelector('button[type="submit"]').disabled = true;
      } else {
        photoFileInput.disabled = false;
        photoUploadForm.querySelector('button[type="submit"]').disabled = false;
      }
    }

    // Login form submission
    loginForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const memberNumber = memberNumberInput.value.trim();
      const pin = pinInput.value.trim();

      if (!memberNumber || !pin) {
        showMessage('Please enter both member number and PIN.', 'error');
        return;
      }

      showLoading();
      
      try {
        const response = await fetch('/api/member-login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ memberNumber, pin }),
        });
        
        const data = await response.json();
        
        if (data.success) {
          // Store member info using new auth system
          setUserSession(data.member);
          currentMember = data.member;
          currentMemberNumber = memberNumber;
          
          // Hide login section and show profile
          document.getElementById('loginSection').classList.add('hidden');
          document.getElementById('profileContent').classList.remove('hidden');
          
          // Load profile data
          await loadProfileData(memberNumber);
          
          // Check for return URL
          checkReturnUrl();
          
          showMessage('Successfully logged in!', 'success');
        } else {
          showMessage(data.error || 'Failed to load profile', 'error');
        }
      } catch (err) {
        console.error('Error logging in:', err);
        showMessage('An error occurred while logging in.', 'error');
      }
    });

    // Check for member number in URL parameters and pre-populate
    function checkUrlParams() {
      const urlParams = new URLSearchParams(window.location.search);
      const memberNumber = urlParams.get('memberNumber');
      
      if (memberNumber) {
        // Check if this is the current user's own profile
        const currentUser = getCurrentUser();
        
        if (currentUser && currentUser.member_number === memberNumber) {
          // It's the current user's own profile - pre-populate login form
          memberNumberInput.value = memberNumber;
          memberNumberInput.disabled = true;
          memberNumberInput.classList.add('bg-gray-100');
          pinInput.focus();
          showMessage(`Member number ${memberNumber} pre-filled. Please enter your PIN.`, 'info');
        } else {
          // It's another member's profile - show their profile
          showOtherMemberProfile(memberNumber);
        }
      }
    }

    // Logout function
    function logout() {
      if (confirm('Are you sure you want to log out?')) {
        clearUserSession();
        currentMember = null;
        currentMemberNumber = null;
        
        // Show login section and hide profile
        document.getElementById('loginSection').classList.remove('hidden');
        document.getElementById('profileContent').classList.add('hidden');
        document.getElementById('otherMemberSection').classList.add('hidden');
        
        // Reset form
        loginForm.reset();
        memberNumberInput.disabled = false;
        memberNumberInput.classList.remove('bg-gray-100');
        
        // Update page title
        document.getElementById('pageTitle').textContent = 'My Sailing Profile';
        document.getElementById('pageDescription').textContent = 'Track your sailing adventures, connect with fellow sailors, and share your experiences.';
        
        showMessage('Successfully logged out.', 'success');
      }
    }

    // Make functions globally available for onclick handlers
    window.deleteTrip = deleteTrip;
    window.deletePhoto = deletePhoto;
    window.logout = logout;
    window.openEditProfileModal = openEditProfileModal;
    window.closeEditProfileModal = closeEditProfileModal;
    window.removeProfilePhoto = removeProfilePhoto;
    window.openMessageTo = openMessageTo;
    window.selectMember = selectMember;

    // Show another member's profile
    async function showOtherMemberProfile(memberNumber) {
      try {
        // Update page title and description
        document.getElementById('pageTitle').textContent = 'Member Profile';
        document.getElementById('pageDescription').textContent = 'Viewing another member\'s sailing profile and achievements.';
        
        // Hide login section and show other member section
        document.getElementById('loginSection').classList.add('hidden');
        document.getElementById('otherMemberSection').classList.remove('hidden');
        
        // Load member data
        const response = await fetch(`/api/members?memberNumber=${memberNumber}`);
        const data = await response.json();
        
        if (data.success && data.member) {
          const member = data.member;
          
          // Update member info
          document.getElementById('otherMemberName').textContent = member.name;
          document.getElementById('otherMemberBio').textContent = member.bio || 'No bio yet';
          
          // Handle profile photo
          const otherMemberImage = document.getElementById('otherMemberImage');
          const otherMemberInitials = document.getElementById('otherMemberInitials');
          const otherMemberAvatar = document.getElementById('otherMemberAvatar');
          
          if (member.profile_picture) {
            otherMemberImage.src = member.profile_picture;
            otherMemberImage.classList.remove('hidden');
            otherMemberInitials.classList.add('hidden');
          } else {
            otherMemberInitials.textContent = member.name.split(' ').map(n => n[0]).join('').toUpperCase();
            otherMemberImage.classList.add('hidden');
            otherMemberInitials.classList.remove('hidden');
          }
          
          // Load member stats and data
          await loadOtherMemberData(memberNumber);
          
        } else {
          showMessage('Member not found', 'error');
        }
      } catch (error) {
        console.error('Error loading other member profile:', error);
        showMessage('Error loading member profile', 'error');
      }
    }

    // Load profile data
    async function loadProfileData(memberNumber) {
      try {
        // Load basic profile info
        const profileResponse = await fetch(`/api/profile?memberNumber=${memberNumber}`);
        const profileData = await profileResponse.json();
        
        if (profileData.success) {
          displayProfile(profileData.member);
          
          // Update stats with trips data
          if (profileData.trips) {
            document.getElementById('totalTrips').textContent = profileData.trips.length;
            
            // Display trips
            displayTrips(profileData.trips);
          }
          
          // Load additional data
          await Promise.all([
            loadBoatHours(memberNumber),
            loadTripPhotos(memberNumber)
          ]);
        } else {
          showError(profileData.error || 'Failed to load profile');
        }
      } catch (err) {
        console.error('Error loading profile data:', err);
        showError('Failed to load profile data');
      }
    }

    // Display profile
    function displayProfile(data) {
      // Update profile header
      document.getElementById('profileName').textContent = data.name;
      document.getElementById('profileMemberNumber').textContent = `Member #${data.member_number}`;
      document.getElementById('profileBio').textContent = data.bio || 'No bio yet';
      
      // Handle profile photo display
      const profileImage = document.getElementById('profileImage');
      const profileInitials = document.getElementById('profileInitials');
      const profileAvatar = document.getElementById('profileAvatar');
      
      if (data.profile_picture) {
        // Show profile photo
        profileImage.src = data.profile_picture;
        profileImage.style.display = 'block';
        profileInitials.style.display = 'none';
      } else {
        // Show initials
        profileInitials.textContent = data.name.split(' ').map(n => n[0]).join('').toUpperCase();
        profileImage.style.display = 'none';
        profileInitials.style.display = 'block';
      }
      
      // Show profile content
      hideAll();
      profileContent.classList.remove('hidden');
    }

    // Display trips
    function displayTrips(trips) {
      const tripsList = document.getElementById('tripsList');
      
      if (trips.length === 0) {
        tripsList.innerHTML = '<p class="text-anchor-gray text-center py-8">No trips recorded yet.</p>';
        return;
      }
      
      tripsList.innerHTML = trips.map(trip => {
        const departureDate = new Date(trip.departure_time);
        const returnDate = trip.actual_return ? new Date(trip.actual_return) : null;
        
        // Check if it's a same-day trip
        const isSameDay = returnDate && 
          departureDate.toDateString() === returnDate.toDateString();
        
        // Format the date display
        let dateDisplay;
        if (!returnDate) {
          // Trip in progress
          dateDisplay = `${departureDate.toLocaleDateString()} - In Progress`;
        } else if (isSameDay) {
          // Same day trip - show date and checkout time
          const checkoutTime = departureDate.toLocaleTimeString([], { 
            hour: '2-digit', 
            minute: '2-digit' 
          });
          dateDisplay = `${departureDate.toLocaleDateString()} at ${checkoutTime}`;
        } else {
          // Multi-day trip - show date range
          dateDisplay = `${departureDate.toLocaleDateString()} - ${returnDate.toLocaleDateString()}`;
        }
        
        return `
          <div class="bg-gray-50 rounded-lg p-4">
            <div class="flex justify-between items-start">
              <div>
                <h4 class="font-semibold text-ocean-blue">${trip.boat_name}</h4>
                <p class="text-sm text-anchor-gray">${dateDisplay}</p>
                ${trip.trip_notes ? `<p class="text-sm mt-2">${trip.trip_notes}</p>` : ''}
              </div>
              <div class="text-right">
                <span class="inline-block px-2 py-1 text-xs rounded-full ${
                  trip.actual_return ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'
                }">
                  ${trip.actual_return ? 'Completed' : 'Active'}
                </span>
              </div>
            </div>
          </div>
        `;
      }).join('');
    }

    // Load boat hours
    async function loadBoatHours(memberNumber) {
      try {
        console.log('Loading boat hours for member:', memberNumber);
        const response = await fetch(`/api/boat-hours?memberNumber=${memberNumber}`);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Boat hours API response:', data);
        
        if (data.boatHours) {
          displayBoatHours(data.boatHours, data.totalHours);
        } else {
          console.warn('No boat hours data received');
          // Initialize with zero values
          displayBoatHours({
            SoloDinghy: 0,
            Dinghy: 0,
            Keelboat: 0,
            Paddling: 0
          }, 0);
        }
        
        // Also load active checkout
        await loadActiveCheckout(memberNumber);
      } catch (err) {
        console.error('Error loading boat hours:', err);
        // Initialize with zero values on error
        displayBoatHours({
          SoloDinghy: 0,
          Dinghy: 0,
          Keelboat: 0,
          Paddling: 0
        }, 0);
        
        // Still try to load active checkout
        await loadActiveCheckout(memberNumber);
      }
    }

    // Load active checkout
    async function loadActiveCheckout(memberNumber) {
      try {
        console.log('Loading active checkout for member:', memberNumber);
        const response = await fetch(`/api/my-active-boat?memberNumber=${memberNumber}`);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Active checkout API response:', data);
        
        if (data.success) {
          displayActiveCheckout(data.activeBoat);
        } else {
          displayActiveCheckout(null, data.message || 'No active checkout found');
        }
      } catch (err) {
        console.error('Error loading active checkout:', err);
        displayActiveCheckout(null, `Error loading active checkout: ${err.message}`);
      }
    }

    // Display active checkout
    function displayActiveCheckout(activeBoat, errorMessage = null) {
      const activeCheckoutContent = document.getElementById('activeCheckoutContent');
      
      if (errorMessage) {
        activeCheckoutContent.innerHTML = `
          <div class="text-center py-8">
            <div class="text-4xl mb-4">‚ö†Ô∏è</div>
            <p class="text-red-600">${errorMessage}</p>
          </div>
        `;
        return;
      }
      
      if (!activeBoat) {
        activeCheckoutContent.innerHTML = `
          <div class="text-center py-8">
            <div class="text-4xl mb-4">üö§</div>
            <p class="text-anchor-gray text-lg">No active crafts</p>
            <p class="text-sm text-gray-500 mt-2">You don't currently have any boats checked out</p>
          </div>
        `;
        return;
      }
      
      // Calculate time elapsed (both times are in UTC from database)
      const departureTime = new Date(activeBoat.departure_time);
      const now = new Date();
      
      // Debug logging to understand the timezone issue
      console.log('üîç TIMEZONE DEBUG:');
      console.log('- departure_time (raw):', activeBoat.departure_time);
      console.log('- departure_time (parsed):', departureTime.toISOString());
      console.log('- departure_time (local):', departureTime.toLocaleString());
      console.log('- expected_return (raw):', activeBoat.expected_return);
      console.log('- expected_return (parsed):', new Date(activeBoat.expected_return).toISOString());
      console.log('- expected_return (local):', new Date(activeBoat.expected_return).toLocaleString());
      console.log('- current time (UTC):', now.toISOString());
      console.log('- current time (local):', now.toLocaleString());
      
      const elapsedMs = now - departureTime;
      const elapsedHours = Math.floor(elapsedMs / (1000 * 60 * 60));
      const elapsedMinutes = Math.floor((elapsedMs % (1000 * 60 * 60)) / (1000 * 60));
      
      // Calculate time remaining (both times are in UTC from database)
      const expectedReturn = new Date(activeBoat.expected_return);
      const remainingMs = expectedReturn - now;
      
      // Fix the calculation for overdue times - use absolute value for proper calculation
      const remainingHours = Math.floor(Math.abs(remainingMs) / (1000 * 60 * 60));
      const remainingMinutes = Math.floor((Math.abs(remainingMs) % (1000 * 60 * 60)) / (1000 * 60));
      
      console.log('- elapsedMs:', elapsedMs);
      console.log('- remainingMs:', remainingMs);
      console.log('- isOverdue:', remainingMs < 0);
      
      const isOverdue = remainingMs < 0;
      const timeRemainingText = isOverdue 
        ? `Overdue by ${Math.abs(remainingHours)}h ${Math.abs(remainingMinutes)}m`
        : `${remainingHours}h ${remainingMinutes}m remaining`;
      
      // Debug the calculation
      console.log('- remainingHours:', remainingHours);
      console.log('- remainingMinutes:', remainingMinutes);
      console.log('- timeRemainingText:', timeRemainingText);
      
      activeCheckoutContent.innerHTML = `
        <div class="bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-6">
          <div class="flex items-center justify-between mb-4">
            <div>
              <h5 class="text-xl font-semibold text-blue-900">${activeBoat.boat_name}</h5>
              <p class="text-sm text-blue-700">Checked out at ${departureTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>
            </div>
            <div class="text-right">
              <div class="text-2xl">üö§</div>
            </div>
          </div>
          
          <div class="grid grid-cols-2 gap-4 mb-4">
            <div class="bg-white rounded-lg p-3 text-center">
              <div class="text-lg font-bold text-blue-600">${elapsedHours}h ${elapsedMinutes}m</div>
              <div class="text-xs text-blue-800">Time elapsed</div>
            </div>
            <div class="bg-white rounded-lg p-3 text-center">
              <div class="text-lg font-bold ${isOverdue ? 'text-red-600' : 'text-green-600'}">${timeRemainingText}</div>
              <div class="text-xs ${isOverdue ? 'text-red-800' : 'text-green-800'}">${isOverdue ? 'Overdue' : 'Time remaining'}</div>
            </div>
          </div>
          
          <div class="text-center">
            <a href="/en/my-boat" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
              Manage Checkout
            </a>
          </div>
        </div>
      `;
    }

    // Display boat hours
    function displayBoatHours(boatHours, totalHours) {
      // Update individual boat class hours
      document.getElementById('soloDinghyHours').textContent = boatHours.SoloDinghy ? boatHours.SoloDinghy.toFixed(1) : '0';
      document.getElementById('dinghyHours').textContent = boatHours.Dinghy ? boatHours.Dinghy.toFixed(1) : '0';
      document.getElementById('keelboatHours').textContent = boatHours.Keelboat ? boatHours.Keelboat.toFixed(1) : '0';
      document.getElementById('paddlingHours').textContent = boatHours.Paddling ? boatHours.Paddling.toFixed(1) : '0';
      
      // Calculate total from all boat classes (this should be the correct total)
      const calculatedTotal = (boatHours.SoloDinghy || 0) + (boatHours.Dinghy || 0) + (boatHours.Keelboat || 0) + (boatHours.Paddling || 0);
      
      // Update the stats card at the top with the calculated total
      // Note: totalHoursDisplay was removed when we replaced the section with active checkout
      document.getElementById('totalHours').textContent = calculatedTotal.toFixed(1);
    }

    // Load trip photos
    async function loadTripPhotos(memberNumber) {
      try {
        const response = await fetch(`/api/social?action=trip_photos&checkInId=1`);
        const data = await response.json();
        
        if (data.success) {
          displayTripPhotos(data.photos);
          uploadedPhotos = data.photos.length;
          updatePhotoCount();
        }
      } catch (err) {
        console.error('Error loading photos:', err);
      }
    }

    // Display trip photos
    function displayTripPhotos(photos) {
      const photosGrid = document.getElementById('photosGrid');
      
      if (photos.length === 0) {
        photosGrid.innerHTML = '<p class="text-anchor-gray text-center py-8 col-span-full">No photos shared yet.</p>';
        return;
      }
      
      photosGrid.innerHTML = photos.map(photo => `
        <div class="bg-white rounded-lg shadow-lg overflow-hidden">
          <img src="${photo.photo_url}" alt="Trip photo" class="w-full h-48 object-cover">
          <div class="p-4">
            <p class="text-sm text-anchor-gray">${photo.caption || 'No caption'}</p>
            <p class="text-xs text-gray-500 mt-2">by ${photo.sailor_name}</p>
          </div>
        </div>
      `).join('');
    }

    // Load tab data
    function loadTabData(tabName) {
      console.log('loadTabData called with tabName:', tabName);
      console.log('currentMemberNumber:', currentMemberNumber);
      
      if (!currentMemberNumber) {
        console.log('No currentMemberNumber, returning');
        return;
      }
      
      switch (tabName) {
        case 'trips':
          console.log('Loading trips...');
          loadMemberTrips(currentMemberNumber);
          break;
        case 'hours':
          console.log('Loading hours...');
          loadBoatHours(currentMemberNumber);
          break;
        case 'photos':
          console.log('Loading photos...');
          loadTripPhotos(currentMemberNumber);
          break;
        case 'members':
          console.log('Loading members...');
          loadAllMembers();
          break;
        case 'messages':
          console.log('Loading messages...');
          loadMessagesMembers();
          loadUnreadMessageCount();
          break;
      }
    }

    // Find Members functionality
    let allMembers = [];
    let filteredMembers = [];

    async function loadAllMembers() {
      try {
        console.log('Loading all members...');
        const response = await fetch('/api/members');
        const data = await response.json();
        
        console.log('Members API response:', data);
        
        if (data.success) {
          allMembers = data.members.filter(member => member.member_number !== currentMemberNumber);
          filteredMembers = [...allMembers];
          console.log('Filtered members (excluding current user):', allMembers);
          displayMembers(filteredMembers);
          loadMemberStats();
        } else {
          console.error('Failed to load members:', data.error);
        }
      } catch (error) {
        console.error('Error loading members:', error);
      }
    }

    async function loadMemberStats() {
      for (const member of allMembers) {
        try {
          // Load trips count
          const tripsResponse = await fetch(`/api/profile?memberNumber=${member.member_number}`);
          const tripsData = await tripsResponse.json();
          
          if (tripsData.success && tripsData.trips) {
            const tripsElement = document.getElementById(`trips-${member.member_number}`);
            if (tripsElement) {
              tripsElement.textContent = tripsData.trips.length;
            }
          }
          
          // Load boat hours
          const hoursResponse = await fetch(`/api/boat-hours?memberNumber=${member.member_number}`);
          const hoursData = await hoursResponse.json();
          
          if (hoursData.totalHours !== undefined) {
            const hoursElement = document.getElementById(`hours-${member.member_number}`);
            if (hoursElement) {
              hoursElement.textContent = hoursData.totalHours.toFixed(1);
            }
          }
        } catch (error) {
          console.error(`Error loading stats for member ${member.member_number}:`, error);
        }
      }
    }

    function fuzzySearch(searchTerm, text) {
      if (!searchTerm) return true;
      
      const search = searchTerm.toLowerCase();
      const target = text.toLowerCase();
      
      // Exact match
      if (target.includes(search)) return true;
      
      // Split into words and check if any word matches
      const searchWords = search.split(' ').filter(word => word.length > 0);
      const targetWords = target.split(' ').filter(word => word.length > 0);
      
      return searchWords.some(searchWord => 
        targetWords.some(targetWord => 
          targetWord.includes(searchWord) || searchWord.includes(targetWord)
        )
      );
    }

    function displayMembers(members) {
      const memberCount = document.getElementById('memberCount');
      const membersGrid = document.getElementById('membersGrid');
      const noResults = document.getElementById('noResults');
      
      memberCount.textContent = members.length;
      
      if (members.length === 0) {
        membersGrid.classList.add('hidden');
        noResults.classList.remove('hidden');
        return;
      }
      
      membersGrid.classList.remove('hidden');
      noResults.classList.add('hidden');
      
      membersGrid.innerHTML = members.map(member => `
        <div class="bg-white rounded-lg shadow-md border border-gray-200 hover:shadow-lg transition-shadow">
          <div class="p-6">
            <!-- Profile Photo/Initials -->
            <div class="flex items-center mb-4">
              <div class="w-16 h-16 bg-ocean-blue rounded-full flex items-center justify-center text-white text-xl font-bold overflow-hidden mr-4" id="avatar-${member.member_number}">
                ${member.profile_picture ? 
                  `<img src="${member.profile_picture}" alt="Profile photo" class="w-full h-full object-cover" id="photo-${member.member_number}">` :
                  `<span>${member.name.split(' ').map(n => n[0]).join('').toUpperCase()}</span>`
                }
              </div>
              <div class="flex-1">
                <h4 class="text-lg font-semibold text-gray-900">
                  ${member.name}
                  ${member.is_admin ? 
                    '<span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-100 text-purple-800">Admin</span>' : 
                    ''
                  }
                </h4>
              </div>
            </div>
            
            <!-- Bio -->
            <div class="mb-4">
              <p class="text-sm text-gray-700">
                ${member.bio || 'No bio yet'}
              </p>
            </div>
            
            <!-- Stats -->
            <div class="grid grid-cols-2 gap-4 mb-4 text-center">
              <div class="bg-blue-50 rounded-lg p-3">
                <div class="text-lg font-bold text-blue-600" id="trips-${member.member_number}">-</div>
                <div class="text-xs text-blue-800">Trips</div>
              </div>
              <div class="bg-green-50 rounded-lg p-3">
                <div class="text-lg font-bold text-green-600" id="hours-${member.member_number}">-</div>
                <div class="text-xs text-green-800">Hours</div>
              </div>
            </div>
            
            <!-- Message Button -->
            <button
              onclick="openMessageTo('${member.member_number}', '${member.name}')"
              class="w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-semibold flex items-center justify-center"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
              </svg>
              Message
            </button>
          </div>
        </div>
      `).join('');
      
      // Reload stats for displayed members
      loadMemberStats();
    }

    function openMessageTo(memberNumber, memberName) {
      // Switch to messages tab and select the member
      const messagesTab = document.querySelector('[data-tab="messages"]');
      messagesTab.click();
      
      // Set a flag to auto-select the member when messages tab loads
      window.autoSelectMember = { memberNumber, memberName };
    }

    // Messages functionality
    let messagesMembers = [];
    let selectedMember = null;
    let messages = [];

    async function loadMessagesMembers() {
      try {
        console.log('Loading messages members...');
        const response = await fetch('/api/members');
        const data = await response.json();
        
        console.log('Messages members API response:', data);
        
        if (data.success) {
          messagesMembers = data.members.filter(member => member.member_number !== currentMemberNumber);
          console.log('Messages members (excluding current user):', messagesMembers);
          displayMessagesMembers(messagesMembers);
          
          // Auto-select member if flag is set
          if (window.autoSelectMember) {
            await selectMember(window.autoSelectMember.memberNumber, window.autoSelectMember.memberName);
            window.autoSelectMember = null;
          }
        } else {
          console.error('Failed to load messages members:', data.error);
        }
      } catch (error) {
        console.error('Error loading members:', error);
      }
    }

    function displayMessagesMembers(members) {
      const membersList = document.getElementById('messagesMembersList');
      membersList.innerHTML = members.map(member => `
        <div 
          class="p-3 hover:bg-gray-100 cursor-pointer border-b border-gray-200 member-item"
          data-member-number="${member.member_number}"
          onclick="selectMember('${member.member_number}', '${member.name}')"
        >
          <div class="flex items-center">
            <div class="w-10 h-10 bg-ocean-blue rounded-full flex items-center justify-center text-white text-sm font-bold mr-3">
              ${member.profile_picture ? 
                `<img src="${member.profile_picture}" alt="Profile" class="w-full h-full object-cover rounded-full">` :
                member.name.split(' ').map(n => n[0]).join('').toUpperCase()
              }
            </div>
            <div class="flex-1">
              <div class="font-semibold text-gray-900">${member.name}</div>
              <div class="text-xs text-gray-500">${member.bio || 'No bio'}</div>
            </div>
          </div>
        </div>
      `).join('');
    }

    async function selectMember(memberNumber, memberName) {
      console.log('selectMember called with:', memberNumber, memberName);
      console.log('currentMemberNumber:', currentMemberNumber);
      
      selectedMember = { memberNumber, name: memberName };
      console.log('selectedMember set to:', selectedMember);
      
      // Update UI
      const chatTitle = document.getElementById('chatTitle');
      const chatSubtitle = document.getElementById('chatSubtitle');
      const messageInputContainer = document.getElementById('messageInputContainer');
      
      console.log('UI elements found:', { chatTitle, chatSubtitle, messageInputContainer });
      
      if (chatTitle) chatTitle.textContent = memberName;
      if (chatSubtitle) chatSubtitle.textContent = '';
      if (messageInputContainer) messageInputContainer.style.display = 'block';
      
      // Highlight selected member
      document.querySelectorAll('.member-item').forEach(item => {
        item.classList.remove('bg-blue-100');
      });
      const selectedElement = document.querySelector(`[data-member-number="${memberNumber}"]`);
      console.log('Selected element:', selectedElement);
      if (selectedElement) {
        selectedElement.classList.add('bg-blue-100');
      }
      
      // Load messages
      await loadMessages();
    }

    async function loadMessages() {
      console.log('loadMessages called, selectedMember:', selectedMember);
      if (!selectedMember) {
        console.log('No selected member, returning');
        return;
      }
      
      try {
        console.log('Fetching messages for:', currentMemberNumber, 'and', selectedMember.memberNumber);
        const response = await fetch(`/api/messages?action=conversation&memberNumber1=${currentMemberNumber}&memberNumber2=${selectedMember.memberNumber}`);
        const data = await response.json();
        
        console.log('Messages API response:', data);
        
        if (data.success) {
          messages = data.messages;
          console.log('Messages loaded:', messages);
          displayMessages();
        } else {
          console.error('Failed to load messages:', data.error);
        }
      } catch (error) {
        console.error('Error loading messages:', error);
      }
    }

    function displayMessages() {
      console.log('displayMessages called with messages:', messages);
      const messagesArea = document.getElementById('messagesArea');
      console.log('messagesArea element:', messagesArea);
      
      if (messages.length === 0) {
        console.log('No messages to display');
        messagesArea.innerHTML = `
          <div class="text-center text-gray-500 py-8">
            <div class="text-4xl mb-4">üí¨</div>
            <p>No messages yet. Start the conversation!</p>
          </div>
        `;
        return;
      }

      console.log('Displaying', messages.length, 'messages');
      messagesArea.innerHTML = messages.map(msg => {
        const isOwnMessage = msg.sender_member_number === currentMemberNumber;
        const messageTime = new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        console.log('Processing message:', msg);
        console.log('isOwnMessage:', isOwnMessage);
        console.log('currentMemberNumber:', currentMemberNumber);
        console.log('msg.sender_member_number:', msg.sender_member_number);
        
        // Get current user name from auth system
        const currentUser = getCurrentUser();
        const currentUserName = currentUser ? currentUser.name : 'You';
        
        return `
          <div class="flex ${isOwnMessage ? 'justify-end' : 'justify-start'} mb-4">
            <div class="max-w-xs lg:max-w-md">
              <div class="flex items-end space-x-2">
                ${!isOwnMessage ? `
                  <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-xs font-bold">
                    ${selectedMember.name.split(' ').map(n => n[0]).join('').toUpperCase()}
                  </div>
                ` : ''}
                <div class="${isOwnMessage ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-900'} rounded-lg px-4 py-2">
                  <p class="text-sm">${msg.message}</p>
                  <p class="text-xs ${isOwnMessage ? 'text-blue-100' : 'text-gray-500'} mt-1">${messageTime}</p>
                </div>
                ${isOwnMessage ? `
                  <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-xs font-bold">
                    ${currentUserName.split(' ').map(n => n[0]).join('').toUpperCase()}
                  </div>
                ` : ''}
              </div>
            </div>
          </div>
        `;
      }).join('');
      
      console.log('Messages HTML generated, scrolling to bottom');
      // Scroll to bottom
      messagesArea.scrollTop = messagesArea.scrollHeight;
    }

    async function sendMessage() {
      if (!selectedMember || !document.getElementById('messageInput').value.trim()) return;
      
      const message = document.getElementById('messageInput').value.trim();
      
      try {
        const response = await fetch('/api/messages', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: 'send',
            senderMemberNumber: currentMemberNumber,
            receiverMemberNumber: selectedMember.memberNumber,
            message: message
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          document.getElementById('messageInput').value = '';
          await loadMessages();
        }
      } catch (error) {
        console.error('Error sending message:', error);
      }
    }

    async function loadUnreadMessageCount() {
      try {
        console.log('Loading unread message count for member:', currentMemberNumber);
        const response = await fetch(`/api/messages?action=unreadCount&memberNumber1=${currentMemberNumber}`);
        const data = await response.json();
        
        console.log('Unread count API response:', data);
        
        if (data.success) {
          const badge = document.getElementById('messagesBadge');
          const unreadCount = document.getElementById('unreadCount');
          
          console.log('Unread count:', data.count);
          console.log('Badge element:', badge);
          console.log('Unread count element:', unreadCount);
          
          if (badge) {
            badge.textContent = data.count;
            badge.style.display = data.count > 0 ? 'inline' : 'none';
          }
          
          if (unreadCount) {
            unreadCount.textContent = data.count;
            unreadCount.style.display = data.count > 0 ? 'inline' : 'none';
          }
        } else {
          console.error('Failed to load unread count:', data.error);
        }
      } catch (error) {
        console.error('Error loading unread count:', error);
      }
    }

    // Load member trips
    async function loadMemberTrips(memberNumber) {
      try {
        const response = await fetch(`/api/profile?memberNumber=${memberNumber}`);
        const data = await response.json();
        
        if (data.success && data.trips) {
          displayTrips(data.trips);
        }
      } catch (err) {
        console.error('Error loading member trips:', err);
      }
    }

    // Load other member data
    async function loadOtherMemberData(memberNumber) {
      try {
        // Load profile data
        const profileResponse = await fetch(`/api/profile?memberNumber=${memberNumber}`);
        const profileData = await profileResponse.json();
        
        if (profileData.success) {
          // Update stats
          if (profileData.trips) {
            document.getElementById('otherMemberTrips').textContent = profileData.trips.length;
            displayOtherTrips(profileData.trips);
          }
          
          // Load additional data
          await Promise.all([
            loadOtherBoatHours(memberNumber),
            loadOtherTripPhotos(memberNumber)
          ]);
        }
      } catch (error) {
        console.error('Error loading other member data:', error);
      }
    }

    // Load other member's boat hours
    async function loadOtherBoatHours(memberNumber) {
      try {
        const response = await fetch(`/api/boat-hours?memberNumber=${memberNumber}`);
        const data = await response.json();
        
        if (data.boatHours) {
          displayOtherBoatHours(data.boatHours, data.totalHours);
        }
        
        // Also load their active checkout
        await loadOtherActiveCheckout(memberNumber);
      } catch (error) {
        console.error('Error loading other boat hours:', error);
      }
    }

    // Load other member's active checkout
    async function loadOtherActiveCheckout(memberNumber) {
      try {
        const response = await fetch(`/api/my-active-boat?memberNumber=${memberNumber}`);
        const data = await response.json();
        
        if (data.success) {
          displayOtherActiveCheckout(data.activeBoat);
        }
      } catch (err) {
        console.error('Error loading other active checkout:', err);
        displayOtherActiveCheckout(null, 'Error loading active checkout');
      }
    }

    // Display other member's active checkout
    function displayOtherActiveCheckout(activeBoat, errorMessage = null) {
      const otherActiveCheckoutContent = document.getElementById('otherActiveCheckoutContent');
      
      if (errorMessage) {
        otherActiveCheckoutContent.innerHTML = `
          <div class="text-center py-8">
            <div class="text-4xl mb-4">‚ö†Ô∏è</div>
            <p class="text-red-600">${errorMessage}</p>
          </div>
        `;
        return;
      }
      
      if (!activeBoat) {
        otherActiveCheckoutContent.innerHTML = `
          <div class="text-center py-8">
            <div class="text-4xl mb-4">üö§</div>
            <p class="text-anchor-gray text-lg">No active crafts</p>
            <p class="text-sm text-gray-500 mt-2">This member doesn't currently have any boats checked out</p>
          </div>
        `;
        return;
      }
      
      // Calculate time elapsed (both times are in UTC from database)
      const departureTime = new Date(activeBoat.departure_time);
      const now = new Date();
      const elapsedMs = now - departureTime;
      const elapsedHours = Math.floor(elapsedMs / (1000 * 60 * 60));
      const elapsedMinutes = Math.floor((elapsedMs % (1000 * 60 * 60)) / (1000 * 60));
      
      // Calculate time remaining (both times are in UTC from database)
      const expectedReturn = new Date(activeBoat.expected_return);
      const remainingMs = expectedReturn - now;
      
      // Fix the calculation for overdue times - use absolute value for proper calculation
      const remainingHours = Math.floor(Math.abs(remainingMs) / (1000 * 60 * 60));
      const remainingMinutes = Math.floor((Math.abs(remainingMs) % (1000 * 60 * 60)) / (1000 * 60));
      
      const isOverdue = remainingMs < 0;
      const timeRemainingText = isOverdue 
        ? `Overdue by ${Math.abs(remainingHours)}h ${Math.abs(remainingMinutes)}m`
        : `${remainingHours}h ${remainingMinutes}m remaining`;
      
      otherActiveCheckoutContent.innerHTML = `
        <div class="bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-6">
          <div class="flex items-center justify-between mb-4">
            <div>
              <h5 class="text-xl font-semibold text-blue-900">${activeBoat.boat_name}</h5>
              <p class="text-sm text-blue-700">Checked out at ${departureTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>
            </div>
            <div class="text-right">
              <div class="text-2xl">üö§</div>
            </div>
          </div>
          
          <div class="grid grid-cols-2 gap-4">
            <div class="bg-white rounded-lg p-3 text-center">
              <div class="text-lg font-bold text-blue-600">${elapsedHours}h ${elapsedMinutes}m</div>
              <div class="text-xs text-blue-800">Time elapsed</div>
            </div>
            <div class="bg-white rounded-lg p-3 text-center">
              <div class="text-lg font-bold ${isOverdue ? 'text-red-600' : 'text-green-600'}">${timeRemainingText}</div>
              <div class="text-xs ${isOverdue ? 'text-red-800' : 'text-green-800'}">${isOverdue ? 'Overdue' : 'Time remaining'}</div>
            </div>
          </div>
        </div>
      `;
    }

    // Display other member's boat hours
    function displayOtherBoatHours(boatHours, totalHours) {
      document.getElementById('otherSoloDinghyHours').textContent = boatHours.SoloDinghy ? boatHours.SoloDinghy.toFixed(1) : '0';
      document.getElementById('otherDinghyHours').textContent = boatHours.Dinghy ? boatHours.Dinghy.toFixed(1) : '0';
      document.getElementById('otherKeelboatHours').textContent = boatHours.Keelboat ? boatHours.Keelboat.toFixed(1) : '0';
      document.getElementById('otherPaddlingHours').textContent = boatHours.Paddling ? boatHours.Paddling.toFixed(1) : '0';
      
      // Calculate total from all boat classes (this should be the correct total)
      const calculatedTotal = (boatHours.SoloDinghy || 0) + (boatHours.Dinghy || 0) + (boatHours.Keelboat || 0) + (boatHours.Paddling || 0);
      
      // Note: otherTotalHoursDisplay was removed when we replaced the section, but keep otherMemberHours for the stats card
      document.getElementById('otherMemberHours').textContent = calculatedTotal.toFixed(1);
    }

    // Display other member's trips
    function displayOtherTrips(trips) {
      const tripsList = document.getElementById('otherTripsList');
      
      if (trips.length === 0) {
        tripsList.innerHTML = '<p class="text-anchor-gray text-center py-8">No trips recorded yet.</p>';
        return;
      }
      
      tripsList.innerHTML = trips.map(trip => {
        const departureDate = new Date(trip.departure_time);
        const returnDate = trip.actual_return ? new Date(trip.actual_return) : null;
        
        const isSameDay = returnDate && 
          departureDate.toDateString() === returnDate.toDateString();
        
        let dateDisplay;
        if (!returnDate) {
          dateDisplay = `${departureDate.toLocaleDateString()} - In Progress`;
        } else if (isSameDay) {
          const checkoutTime = departureDate.toLocaleTimeString([], { 
            hour: '2-digit', 
            minute: '2-digit' 
          });
          dateDisplay = `${departureDate.toLocaleDateString()} at ${checkoutTime}`;
        } else {
          dateDisplay = `${departureDate.toLocaleDateString()} - ${returnDate.toLocaleDateString()}`;
        }
        
        return `
          <div class="bg-gray-50 rounded-lg p-4">
            <div class="flex justify-between items-start">
              <div>
                <h4 class="font-semibold text-ocean-blue">${trip.boat_name}</h4>
                <p class="text-sm text-anchor-gray">${dateDisplay}</p>
                ${trip.trip_notes ? `<p class="text-sm mt-2">${trip.trip_notes}</p>` : ''}
              </div>
              <div class="text-right">
                <span class="inline-block px-2 py-1 text-xs rounded-full ${
                  trip.actual_return ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'
                }">
                  ${trip.actual_return ? 'Completed' : 'Active'}
                </span>
              </div>
            </div>
          </div>
        `;
      }).join('');
    }

    // Load other member's trip photos
    async function loadOtherTripPhotos(memberNumber) {
      try {
        const response = await fetch(`/api/social?action=trip_photos&checkInId=1`);
        const data = await response.json();
        
        if (data.success) {
          displayOtherTripPhotos(data.photos);
        }
      } catch (error) {
        console.error('Error loading other photos:', error);
      }
    }

    // Display other member's trip photos
    function displayOtherTripPhotos(photos) {
      const photosGrid = document.getElementById('otherPhotosGrid');
      
      if (photos.length === 0) {
        photosGrid.innerHTML = '<p class="text-anchor-gray text-center py-8 col-span-full">No photos shared yet.</p>';
        return;
      }
      
      photosGrid.innerHTML = photos.map(photo => `
        <div class="bg-white rounded-lg shadow-lg overflow-hidden">
          <img src="${photo.photo_url}" alt="Trip photo" class="w-full h-48 object-cover">
          <div class="p-4">
            <p class="text-sm text-anchor-gray">${photo.caption || 'No caption'}</p>
            <p class="text-xs text-gray-500 mt-2">by ${photo.sailor_name}</p>
          </div>
        </div>
      `).join('');
    }

    // Utility functions
    function showLoading() {
      hideAll();
      loading.classList.remove('hidden');
    }

    function showError(message) {
      hideAll();
      errorMessage.textContent = message;
      error.classList.remove('hidden');
    }

    function showMessage(message, type = 'info') {
      messageDiv.textContent = message;
      messageDiv.className = 'mt-4 p-3 rounded-lg';
      if (type === 'success') {
        messageDiv.classList.add('bg-green-50', 'border-green-200', 'text-green-800');
      } else if (type === 'error') {
        messageDiv.classList.add('bg-red-50', 'border-red-200', 'text-red-800');
      } else {
        messageDiv.classList.add('bg-blue-50', 'border-blue-200', 'text-blue-800');
      }
      messageDiv.classList.remove('hidden');
    }

    function hideAll() {
      loading.classList.add('hidden');
      profileContent.classList.add('hidden');
      error.classList.add('hidden');
      messageDiv.classList.add('hidden');
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', () => {
      // Add event listeners for search functionality
      const memberSearch = document.getElementById('memberSearch');
      const clearSearch = document.getElementById('clearSearch');
      const messageMemberSearch = document.getElementById('messageMemberSearch');
      const sendMessageBtn = document.getElementById('sendMessageBtn');
      const messageInput = document.getElementById('messageInput');
      
      // Member search functionality
      if (memberSearch) {
        memberSearch.addEventListener('input', (e) => {
          const searchTerm = e.target.value.toLowerCase();
          filteredMembers = allMembers.filter(member => 
            fuzzySearch(searchTerm, member.name)
          );
          displayMembers(filteredMembers);
        });
      }
      
      // Clear search functionality
      if (clearSearch) {
        clearSearch.addEventListener('click', () => {
          memberSearch.value = '';
          filteredMembers = [...allMembers];
          displayMembers(filteredMembers);
        });
      }
      
      // Sort by name functionality
      const sortByName = document.getElementById('sortByName');
      if (sortByName) {
        sortByName.addEventListener('click', () => {
          filteredMembers.sort((a, b) => a.name.localeCompare(b.name));
          displayMembers(filteredMembers);
        });
      }
      
      // Sort by hours functionality
      const sortByHours = document.getElementById('sortByHours');
      if (sortByHours) {
        sortByHours.addEventListener('click', () => {
          // This would need to be implemented with actual hours data
          // For now, just show a message
          showMessage('Sort by hours functionality coming soon!', 'info');
        });
      }
      
      // Message member search functionality
      if (messageMemberSearch) {
        messageMemberSearch.addEventListener('input', (e) => {
          const searchTerm = e.target.value.toLowerCase();
          const filteredMessagesMembers = messagesMembers.filter(member => 
            member.name.toLowerCase().includes(searchTerm)
          );
          displayMessagesMembers(filteredMessagesMembers);
        });
      }
      
      // Send message functionality
      if (sendMessageBtn) {
        sendMessageBtn.addEventListener('click', sendMessage);
      }
      
      // Send message on Enter key
      if (messageInput) {
        messageInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            sendMessage();
          }
        });
      }
    });

    // Note: Authentication functions (setUserSession, getCurrentUser, clearUserSession) 
    // are imported from '../../lib/auth.js' at the top of this script

    // Edit Profile Modal Functions
    function openEditProfileModal() {
      // Populate modal with current data
      const currentUser = getCurrentUser();
      if (currentUser) {
        editBioTextarea.value = currentUser.bio || '';
        
        // Update modal profile photo display
        const modalProfileImage = document.getElementById('modalProfileImage');
        const modalProfileInitials = document.getElementById('modalProfileInitials');
        
        if (currentUser.profile_picture) {
          modalProfileImage.src = currentUser.profile_picture;
          modalProfileImage.classList.remove('hidden');
          modalProfileInitials.classList.add('hidden');
          removeProfilePhotoBtn.style.display = 'inline-block';
        } else {
          modalProfileInitials.textContent = currentUser.name.split(' ').map(n => n[0]).join('').toUpperCase();
          modalProfileImage.classList.add('hidden');
          modalProfileInitials.classList.remove('hidden');
          removeProfilePhotoBtn.style.display = 'none';
        }
      }
      
      editProfileModal.classList.remove('hidden');
    }

    function closeEditProfileModal() {
      editProfileModal.classList.add('hidden');
    }

    async function updateProfilePhoto(base64Data) {
      try {
        const currentUser = getCurrentUser();
        if (!currentUser) {
          throw new Error('No current user');
        }

        const response = await fetch('/api/profile', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            memberNumber: currentUser.member_number,
            profileData: {
              profile_picture: base64Data
            }
          }),
        });

        const data = await response.json();
        
        if (data.success) {
          // Update the current user session with new photo
          const updatedUser = { ...currentUser, profile_picture: base64Data };
          setUserSession(updatedUser);
          
          // Update profile display
          const profileImage = document.getElementById('profileImage');
          const profileInitials = document.getElementById('profileInitials');
          
          profileImage.src = base64Data;
          profileImage.style.display = 'block';
          profileInitials.style.display = 'none';
          
          // Update modal display
          const modalProfileImage = document.getElementById('modalProfileImage');
          const modalProfileInitials = document.getElementById('modalProfileInitials');
          
          modalProfileImage.src = base64Data;
          modalProfileImage.classList.remove('hidden');
          modalProfileInitials.classList.add('hidden');
          removeProfilePhotoBtn.style.display = 'inline-block';
          
          showMessage('Profile photo updated successfully!', 'success');
        } else {
          throw new Error(data.error || 'Failed to update profile photo');
        }
      } catch (error) {
        console.error('Error updating profile photo:', error);
        showMessage('Failed to update profile photo: ' + error.message, 'error');
      }
    }

    async function updateBio() {
      try {
        const currentUser = getCurrentUser();
        if (!currentUser) {
          throw new Error('No current user');
        }

        const newBio = editBioTextarea.value.trim();
        
        const response = await fetch('/api/profile', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            memberNumber: currentUser.member_number,
            profileData: {
              bio: newBio
            }
          }),
        });

        const data = await response.json();
        
        if (data.success) {
          // Update the current user session with new bio
          const updatedUser = { ...currentUser, bio: newBio };
          setUserSession(updatedUser);
          
          // Update profile display
          document.getElementById('profileBio').textContent = newBio || 'No bio yet';
          
          showMessage('Bio updated successfully!', 'success');
        } else {
          throw new Error(data.error || 'Failed to update bio');
        }
      } catch (error) {
        console.error('Error updating bio:', error);
        showMessage('Failed to update bio: ' + error.message, 'error');
      }
    }

    async function removeProfilePhoto() {
      try {
        const currentUser = getCurrentUser();
        if (!currentUser) {
          throw new Error('No current user');
        }

        const response = await fetch('/api/profile', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            memberNumber: currentUser.member_number,
            profileData: {
              profile_picture: null
            }
          }),
        });

        const data = await response.json();
        
        if (data.success) {
          // Update the current user session
          const updatedUser = { ...currentUser, profile_picture: null };
          setUserSession(updatedUser);
          
          // Update profile display
          const profileImage = document.getElementById('profileImage');
          const profileInitials = document.getElementById('profileInitials');
          
          profileImage.style.display = 'none';
          profileInitials.textContent = currentUser.name.split(' ').map(n => n[0]).join('').toUpperCase();
          profileInitials.style.display = 'block';
          
          // Update modal display
          const modalProfileImage = document.getElementById('modalProfileImage');
          const modalProfileInitials = document.getElementById('modalProfileInitials');
          
          modalProfileImage.classList.add('hidden');
          modalProfileInitials.textContent = currentUser.name.split(' ').map(n => n[0]).join('').toUpperCase();
          modalProfileInitials.classList.remove('hidden');
          removeProfilePhotoBtn.style.display = 'none';
          
          showMessage('Profile photo removed successfully!', 'success');
        } else {
          throw new Error(data.error || 'Failed to remove profile photo');
        }
      } catch (error) {
        console.error('Error removing profile photo:', error);
        showMessage('Failed to remove profile photo: ' + error.message, 'error');
      }
    }

    // Delete functions
    async function deleteTrip(tripId) {
      if (confirm('Are you sure you want to delete this trip? This action cannot be undone.')) {
        try {
          const response = await fetch(`/api/check-in/${tripId}`, {
            method: 'DELETE'
          });
          
          const data = await response.json();
          
          if (data.success) {
            showMessage('Trip deleted successfully!', 'success');
            // Reload trips
            if (currentMemberNumber) {
              loadProfileData(currentMemberNumber);
            }
          } else {
            showMessage('Failed to delete trip: ' + data.error, 'error');
          }
        } catch (error) {
          console.error('Error deleting trip:', error);
          showMessage('Failed to delete trip', 'error');
        }
      }
    }

    async function deletePhoto(photoId) {
      if (confirm('Are you sure you want to delete this photo? This action cannot be undone.')) {
        try {
          const response = await fetch(`/api/social`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              action: 'delete_trip_photo',
              tripPhotoId: photoId
            }),
          });
          
          const data = await response.json();
          
          if (data.success) {
            showMessage('Photo deleted successfully!', 'success');
            // Reload photos
            if (currentMemberNumber) {
              loadTripPhotos(currentMemberNumber);
            }
          } else {
            showMessage('Failed to delete photo: ' + data.error, 'error');
          }
        } catch (error) {
          console.error('Error deleting photo:', error);
          showMessage('Failed to delete photo', 'error');
        }
      }
    }
  </script>
</Layout> 