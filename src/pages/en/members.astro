---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import BackButton from '../../components/BackButton.astro';
import { getAllMembers, createMember } from '../../lib/database-postgres.js';

// Get all members
const members = await getAllMembers();
---

<Layout title="Member Management - Ymir Sailing Club" lang="en">
  <Navigation />
  
  <main>
    <!-- Hero Section -->
    <section class="bg-gradient-to-br from-ocean-blue to-blue-600 text-white py-20">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Back Button -->
        <div class="mb-6">
          <BackButton variant="admin" label="Back to Admin" />
        </div>
        
        <div class="text-center">
          <h1 class="text-5xl font-bold mb-6">
            Member Management
          </h1>
          <p class="text-xl mb-8 max-w-3xl mx-auto">
            Manage club members, view PINs, edit member information, and track membership.
          </p>
        </div>
      </div>
    </section>

    <!-- Member Management Content -->
    <section class="py-16 bg-white">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Member Management -->
        <div class="bg-sail-white rounded-lg p-6 shadow-lg mb-8">
          <h3 class="text-xl font-bold text-ocean-blue mb-6">Add New Member</h3>
          <form id="addMemberForm" class="grid md:grid-cols-2 gap-4">
            <div>
              <label for="memberNumber" class="block text-sm font-medium text-gray-700 mb-1">
                Member Number *
              </label>
              <input
                type="text"
                id="memberNumber"
                name="memberNumber"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-ocean-blue"
                placeholder="e.g., 1234"
              />
            </div>
            
            <div>
              <label for="memberName" class="block text-sm font-medium text-gray-700 mb-1">
                Full Name *
              </label>
              <input
                type="text"
                id="memberName"
                name="memberName"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-ocean-blue"
                placeholder="e.g., John Doe"
              />
            </div>
            
            <div>
              <label for="memberPhone" class="block text-sm font-medium text-gray-700 mb-1">
                Phone Number
              </label>
              <input
                type="tel"
                id="memberPhone"
                name="memberPhone"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-ocean-blue"
                placeholder="e.g., +16082172631"
              />
            </div>
            
            <div>
              <label for="memberEmail" class="block text-sm font-medium text-gray-700 mb-1">
                Email Address
              </label>
              <input
                type="email"
                id="memberEmail"
                name="memberEmail"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-ocean-blue"
                placeholder="e.g., john@example.com"
              />
            </div>
            
            <div class="md:col-span-2">
              <button
                type="submit"
                class="w-full px-6 py-3 bg-ocean-blue text-white rounded-lg hover:bg-blue-700 transition-colors font-semibold"
              >
                Add Member
              </button>
            </div>
          </form>
          
          <!-- Success/Error Messages -->
          <div id="message" class="mt-4 p-3 rounded-lg hidden"></div>
        </div>

        <!-- Bulk Import / Dangerous Actions -->
        <div class="bg-sail-white rounded-lg p-6 shadow-lg mb-8">
          <h3 class="text-xl font-bold text-ocean-blue mb-6">Bulk Member Actions</h3>
          <div class="grid md:grid-cols-2 gap-4">
            <div class="p-4 border rounded-lg">
              <h4 class="font-semibold mb-2">Upload Members (CSV)</h4>
              <p class="text-sm text-gray-600 mb-3">Upload a CSV with headers: <span class="font-mono">member_number,name,phone,email,is_admin</span>. Existing rows will be updated.</p>
              <input type="file" id="memberCsv" accept=".csv,text/csv" class="block w-full text-sm text-gray-600" />
              <div class="mt-3">
                <button onclick="uploadMembersCsv()" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Upload CSV</button>
              </div>
              <p class="text-xs text-gray-500 mt-2" id="uploadStatus"></p>
            </div>
            <div class="p-4 border rounded-lg bg-red-50 border-red-200">
              <h4 class="font-semibold mb-2 text-red-800">Delete All Members</h4>
              <p class="text-sm text-red-700 mb-3">This removes all member records and related data. Enter admin PIN to confirm.</p>
              <div class="flex gap-2">
                <input type="password" id="adminPinDeleteAll" placeholder="Admin PIN" class="px-3 py-2 border rounded w-40" />
                <button onclick="deleteAllMembersAction()" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">Delete All Members</button>
              </div>
              <p class="text-xs text-gray-500 mt-2" id="deleteAllStatus"></p>
            </div>
          </div>
        </div>

        <!-- Member List -->
        <div class="bg-sail-white rounded-lg p-6 shadow-lg">
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-xl font-bold text-ocean-blue">Club Members ({members.length})</h3>
            <div class="flex space-x-2">
              <input
                type="text"
                id="searchMembers"
                placeholder="Search members..."
                class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-ocean-blue"
              />
            </div>
          </div>
          
          <div class="overflow-x-auto">
            <table class="min-w-full bg-white border border-gray-200 rounded-lg">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Member #
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Name
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Phone
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Email
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Joined
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody id="membersTableBody" class="bg-white divide-y divide-gray-200">
                {members.map((member: any) => (
                  <tr class="hover:bg-gray-50">
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {member.member_number}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {member.name.replace(/\s+0$/, '')}
                      {member.is_admin && (
                        <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-100 text-purple-800">
                          Admin
                        </span>
                      )}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {member.phone || '-'}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {member.email || '-'}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {new Date(member.created_at).toLocaleDateString()}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <button
                        onclick={`showMemberPin('${member.member_number}', '${member.name}')`}
                        class="text-purple-600 hover:text-purple-700 mr-3"
                      >
                        Show PIN
                      </button>
                      <button
                        onclick={`editMember('${member.member_number}', '${member.name}', '${member.phone || ''}', '${member.email || ''}', ${member.is_admin || false})`}
                        class="text-green-600 hover:text-green-700 mr-3"
                      >
                        Edit
                      </button>
                      <button
                        onclick={`deleteMember('${member.member_number}', '${member.name}')`}
                        class="text-red-600 hover:text-red-700"
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          
          {members.length === 0 && (
            <div class="text-center py-8">
              <p class="text-gray-500">No members found. Add your first member above!</p>
            </div>
          )}
        </div>
      </div>
    </section>
  </main>

  <script>
    // @ts-nocheck
    window.uploadMembersCsv = async function() {
      const fileInput = document.getElementById('memberCsv');
      const status = document.getElementById('uploadStatus');
      status.textContent = '';
      if (!fileInput || !fileInput.files || fileInput.files.length === 0) {
        status.textContent = 'Please choose a CSV file.';
        return;
      }
      const adminMember = localStorage.getItem('adminMember');
      if (!adminMember) {
        status.textContent = 'Admin login required.';
        return;
      }
      const member = JSON.parse(adminMember);
      const csv = await fileInput.files[0].text();
      try {
        const resp = await fetch('/api/upload-members', {
          method: 'POST',
          headers: {
            'Content-Type': 'text/csv',
            'x-admin-member': member.member_number,
            'x-admin-pin': member.pin || ''
          },
          body: csv
        });
        const data = await resp.json();
        if (data.success) {
          status.textContent = `Uploaded/updated ${data.count} members. Reloading...`;
          setTimeout(() => location.reload(), 1000);
        } else {
          status.textContent = data.error || 'Upload failed';
        }
      } catch (e) {
        status.textContent = 'Upload error: ' + e.message;
      }
    }

    window.deleteAllMembersAction = async function() {
      const status = document.getElementById('deleteAllStatus');
      const adminPin = (document.getElementById('adminPinDeleteAll') || {}).value || '';
      status.textContent = '';
      const adminMember = localStorage.getItem('adminMember');
      if (!adminMember) {
        status.textContent = 'Admin login required.';
        return;
      }
      if (!adminPin) {
        status.textContent = 'Admin PIN required.';
        return;
      }
      if (!confirm('This will permanently delete all members and related data. Are you sure?')) return;
      const member = JSON.parse(adminMember);
      try {
        const resp = await fetch('/api/delete-all-members', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ adminMemberNumber: member.member_number, adminPin })
        });
        const data = await resp.json();
        if (data.success) {
          status.textContent = `Deleted ${data.deleted} members.`;
          setTimeout(() => location.reload(), 1000);
        } else {
          status.textContent = data.error || 'Delete failed';
        }
      } catch (e) {
        status.textContent = 'Delete error: ' + e.message;
      }
    }
    // Check if user is logged in as admin
    function checkAdminAuth() {
      const adminMember = localStorage.getItem('adminMember');
      if (!adminMember) {
        // Redirect to admin login if not authenticated
        window.location.href = '/en/admin-login?returnUrl=' + encodeURIComponent(window.location.pathname);
        return;
      }
    }

    // Check auth when page loads
    checkAdminAuth();

    const addMemberForm = document.getElementById('addMemberForm');
    const messageDiv = document.getElementById('message');
    const searchInput = document.getElementById('searchMembers');
    const membersTableBody = document.getElementById('membersTableBody');

    // Handle form submission
    addMemberForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(addMemberForm);
      const data = {
        memberNumber: formData.get('memberNumber'),
        name: formData.get('memberName'),
        phone: formData.get('memberPhone') || null,
        email: formData.get('memberEmail') || null
      };
      
      try {
        const response = await fetch('/api/members', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
          showMessage('Member added successfully!', 'success');
          addMemberForm.reset();
          // Reload the page to show the new member
          setTimeout(() => location.reload(), 1500);
        } else {
          showMessage(result.error || 'Failed to add member', 'error');
        }
      } catch (error) {
        console.error('Error adding member:', error);
        showMessage('An error occurred while adding the member', 'error');
      }
    });

    // Search functionality
    searchInput.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();
      const rows = membersTableBody.querySelectorAll('tr');
      
      rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        if (text.includes(searchTerm)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    });

    function showMessage(text, type) {
      messageDiv.className = 'mt-4 p-3 rounded-lg';
      messageDiv.className += type === 'success' ? ' bg-green-100 text-green-800' : ' bg-red-100 text-red-800';
      messageDiv.textContent = text;
      messageDiv.classList.remove('hidden');
      
      setTimeout(() => {
        messageDiv.classList.add('hidden');
      }, 5000);
    }

    async function showMemberPin(memberNumber, memberName) {
      try {
        const response = await fetch(`/api/members?memberNumber=${memberNumber}`);
        const data = await response.json();
        
        if (data.success && data.member) {
          const pin = data.member.pin || 'No PIN set';
          alert(`${memberName} (Member #${memberNumber})\n\nPIN: ${pin}`);
        } else {
          showMessage('Failed to retrieve member PIN', 'error');
        }
      } catch (error) {
        console.error('Error retrieving member PIN:', error);
        showMessage('An error occurred while retrieving the PIN', 'error');
      }
    }

    function editMember(memberNumber, name, phone, email, isAdmin) {
      // Create edit modal
      const modal = document.createElement('div');
      modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
      modal.innerHTML = `
        <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">Edit Member: ${name}</h3>
            <button onclick="this.closest('.fixed').remove()" class="text-gray-500 hover:text-gray-700 text-xl">&times;</button>
          </div>
          
          <form id="editMemberForm" class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Member Number</label>
              <input type="text" value="${memberNumber}" disabled class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100">
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Name *</label>
              <input type="text" id="editName" value="${name}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-ocean-blue">
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
              <input type="tel" id="editPhone" value="${phone}" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-ocean-blue">
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
              <input type="email" id="editEmail" value="${email}" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-ocean-blue">
            </div>
            
            <div>
              <label class="flex items-center">
                <input type="checkbox" id="editIsAdmin" ${isAdmin ? 'checked' : ''} class="mr-2">
                <span class="text-sm text-gray-700">Admin privileges</span>
              </label>
            </div>
            
            <div class="flex space-x-3 pt-4">
              <button type="submit" class="flex-1 px-4 py-2 bg-ocean-blue text-white rounded-md hover:bg-blue-700 transition-colors">
                Save Changes
              </button>
              <button type="button" onclick="this.closest('.fixed').remove()" class="flex-1 px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors">
                Cancel
              </button>
            </div>
          </form>
        </div>
      `;
      
      document.body.appendChild(modal);
      
      // Handle form submission
      const editForm = modal.querySelector('#editMemberForm');
      editForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        try {
          const response = await fetch(`/api/members`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              memberNumber: memberNumber,
              name: document.getElementById('editName').value,
              phone: document.getElementById('editPhone').value || null,
              email: document.getElementById('editEmail').value || null,
              is_admin: document.getElementById('editIsAdmin').checked
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            showMessage('Member updated successfully!', 'success');
            modal.remove();
            // Reload the page to show updated data
            setTimeout(() => location.reload(), 1500);
          } else {
            showMessage(result.error || 'Failed to update member', 'error');
          }
        } catch (error) {
          console.error('Error updating member:', error);
          showMessage('An error occurred while updating the member', 'error');
        }
      });
    }

    function deleteMember(memberNumber, memberName) {
      const confirmed = confirm(`Are you sure you want to delete ${memberName} (Member #${memberNumber})?\n\nThis action cannot be undone and will permanently remove this member from the system.`);
      
      if (confirmed) {
        // Double confirmation for safety
        const doubleConfirmed = confirm(`Final confirmation: Delete ${memberName} permanently?\n\nThis will remove all their data including trip history and boat hours.`);
        
        if (doubleConfirmed) {
          performDeleteMember(memberNumber, memberName);
        }
      }
    }

    async function performDeleteMember(memberNumber, memberName) {
      try {
        const response = await fetch(`/api/members`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            memberNumber: memberNumber
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          showMessage(`${memberName} has been permanently deleted.`, 'success');
          // Reload the page to update the member list
          setTimeout(() => location.reload(), 1500);
        } else {
          showMessage(result.error || 'Failed to delete member', 'error');
        }
      } catch (error) {
        console.error('Error deleting member:', error);
        showMessage('An error occurred while deleting the member', 'error');
      }
    }

      // Make functions globally accessible for onclick handlers
      window.showMemberPin = showMemberPin;
      window.editMember = editMember;
      window.deleteMember = deleteMember;
    </script>
  </Layout>