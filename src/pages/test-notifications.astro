---
// Admin Notification Debugging Page
import Layout from '../layouts/Layout.astro';
---

<Layout title="Admin Notification Debugging - Ymir Sailing Club">
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-6xl mx-auto px-4">
      <!-- Header -->
      <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
        <div class="flex items-center justify-between">
          <div>
            <div class="flex items-center mb-2">
              <a href="/en/admin-dashboard" class="mr-4 px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors">
                ← Back to Admin Dashboard
              </a>
              <h1 class="text-3xl font-bold text-gray-900">🔧 Admin Notification Debugging</h1>
            </div>
            <p class="text-gray-600">Comprehensive testing and debugging tools for push notifications</p>
          </div>
          <div class="text-right">
            <div class="text-sm text-gray-500">Current Domain</div>
            <div class="font-mono text-lg font-semibold text-blue-600" id="currentDomain">Loading...</div>
          </div>
        </div>
      </div>

      <div class="grid lg:grid-cols-2 gap-6">
    
        <!-- Notification Testing -->
        <div class="bg-white rounded-lg shadow-lg p-6">
          <h2 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
            <span class="bg-blue-100 text-blue-800 rounded-full p-2 mr-3">🧪</span>
            Notification Testing
          </h2>
          
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Member Number (optional)</label>
            <input type="text" id="memberNumber" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="e.g., 1234">
            <p class="text-xs text-gray-500 mt-1">Leave empty to test all users</p>
          </div>
          
          <div class="space-y-3">
            <button title="Client-only. Calls Notification.requestPermission(); if granted, prepares SW/Push setup. No server call." onclick="requestNotificationPermission()" class="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm">
              🔔 Request Notification Permission
            </button>

            <button title="Server push via /api/test-notification?type=test. Targets memberNumber if provided; else all. Uses VAPID + Web Push payload." onclick="testNotification('test')" class="w-full px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors text-sm">
              📢 Basic Test Notification
            </button>

            <button title="End-to-end test path. Invokes scheduler/handlers to emulate real flows, aggregates results, logs success/fail counts." onclick="testNotificationSystem()" class="w-full px-4 py-2 bg-sky-600 text-white rounded-lg hover:bg-sky-700 transition-colors text-sm">
              🔍 Test Notification System
            </button>

            <button title="Client-only. Uses browser Notification API (no service worker). Only visible if page is active." onclick="testDirectNotification()" class="w-full px-4 py-2 bg-amber-500 text-white rounded-lg hover:bg-amber-600 transition-colors text-sm">
              🔔 Test Direct Notification
            </button>

            <button title="Server push via /api/test-notification?type=checkout. Sends templated 'Boat Check-Out Confirmed' payload." onclick="testNotification('checkout')" class="w-full px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors text-sm">
              ⛵ Boat Checkout Confirmation
            </button>

            <button title="Server push via /api/test-notification?type=reminder. Uses extension reminder template and options." onclick="testNotification('reminder')" class="w-full px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors text-sm">
              ⏰ Time Extension Reminder
            </button>

            <button title="Server push via /api/test-notification?type=overdue. Sends escalating overdue alert payload." onclick="testNotification('overdue')" class="w-full px-4 py-2 bg-rose-600 text-white rounded-lg hover:bg-rose-700 transition-colors text-sm">
              🚨 Overdue Boat Alert
            </button>
          </div>
        </div>

        <!-- Subscription Management -->
        <div class="bg-white rounded-lg shadow-lg p-6">
          <h2 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
            <span class="bg-purple-100 text-purple-800 rounded-full p-2 mr-3">🔗</span>
            Subscription Management
          </h2>
          
          <div class="space-y-3">
            <button title="Fetch and print all push subscriptions from database with key presence" onclick="debugSubscriptions()" class="w-full px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm">
              📊 Debug Subscriptions
            </button>

            <button title="Remove DB rows with missing p256dh/auth to avoid using broken subscriptions" onclick="cleanupInvalidSubscriptions()" class="w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm">
              🧹 Clean Invalid Subscriptions
            </button>

            <button title="Delete ALL push subscriptions (simulates everyone logged out)" onclick="deleteAllSubscriptions()" class="w-full px-4 py-2 bg-red-700 text-white rounded-lg hover:bg-red-800 transition-colors text-sm">
              🗑️ Delete All Subscriptions
            </button>

            <button title="Call external webhook endpoint to run scheduler (for external cron)" onclick="testWebhook()" class="w-full px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors text-sm">
              🔗 Test Webhook
            </button>

            <button title="Call internal cron endpoint to run scheduler now" onclick="testCronJob()" class="w-full px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm">
              🕐 Test Cron Job
            </button>

            <button title="Check client/server VAPID configuration and attempt a fresh subscription" onclick="verifyVapidKeys()" class="w-full px-4 py-2 bg-indigo-700 text-white rounded-lg hover:bg-indigo-800 transition-colors text-sm">
              🔑 Verify VAPID Keys
            </button>

            <button title="Recreate push subscription to ensure p256dh/auth keys are present" onclick="fixEncryptionKeys()" class="w-full px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors text-sm">
              🔧 Fix Encryption Keys
            </button>

            <button title="Associate an existing anonymous subscription with the entered member number" onclick="fixSubscriptionLink()" class="w-full px-4 py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700 transition-colors text-sm">
              🔗 Fix Subscription Link
            </button>

            <button title="Extract keys from current browser subscription and update DB row" onclick="updateDatabaseSubscriptions()" class="w-full px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm">
              🔄 Update Database Subscriptions
            </button>
          </div>
        </div>

        <!-- Compact System Status -->
        <div class="lg:col-span-2 bg-white rounded-lg shadow-lg p-4 mt-6">
          <div class="flex flex-wrap items-center gap-3">
            <div class="text-sm font-semibold text-gray-700">System Status:</div>
            <div class="px-3 py-1 rounded-full text-xs font-medium bg-gray-50 text-gray-800" title="Current browser Notification permission state">
              🔔 Notifications: <span id="notificationSupport">Checking...</span>
            </div>
            <div class="px-3 py-1 rounded-full text-xs font-medium bg-gray-50 text-gray-800" title="Service worker registration state for this origin">
              🧩 Service Worker: <span id="serviceWorkerStatus">Checking...</span>
            </div>
            <div class="px-3 py-1 rounded-full text-xs font-medium bg-gray-50 text-gray-800" title="Whether a PushManager subscription currently exists in this browser">
              📬 Push Subscription: <span id="pushSubscriptionStatus">Checking...</span>
            </div>
            <div class="px-3 py-1 rounded-full text-xs font-medium bg-gray-50 text-gray-800 overflow-hidden text-ellipsis" style="max-width: 40ch" title="Client user agent string">
              🖥️ UA: <span id="userAgent">Loading...</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Debug Log Section -->
      <div class="mt-8 bg-white rounded-lg shadow-lg p-6">
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-xl font-bold text-gray-900 flex items-center">
            <span class="bg-blue-100 text-blue-800 rounded-full p-2 mr-3">📋</span>
            Debug Log
          </h2>
          <button onclick="clearDebugLog()" class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm">
            Clear Log
      </button>
        </div>
        <div id="debugLog" class="bg-gray-50 rounded-lg p-4 max-h-96 overflow-y-auto font-mono text-sm">
          <div class="text-gray-500">Debug information will appear here...</div>
        </div>
      </div>

      <!-- Status Display -->
      <div class="mt-4">
        <div id="status" class="hidden"></div>
      </div>
    </div>
  </div>

  <script>
    // @ts-nocheck
    // Global variables
    window.isTesting = false;
    
    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      initializePage();
    });
    
    function initializePage() {
      // Set current domain
      document.getElementById('currentDomain').textContent = window.location.origin;
      
      // Check system status
      checkNotificationSupport();
      checkServiceWorker();
      checkPushSubscription();
      updateUserAgent();
    }
    
    function updateUserAgent() {
      document.getElementById('userAgent').textContent = navigator.userAgent;
    }
    
    function updateStatus(elementId, status, isSuccess = true) {
      const element = document.getElementById(elementId);
      element.textContent = status;
      element.className = `px-3 py-1 rounded-full text-sm font-medium ${
        isSuccess ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
      }`;
    }
    
    function showStatus(message, type = 'info') {
      const statusDiv = document.getElementById('status');
      statusDiv.className = `p-4 rounded-lg ${
        type === 'success' ? 'bg-green-50 text-green-800 border border-green-200' :
        type === 'error' ? 'bg-red-50 text-red-800 border border-red-200' :
        'bg-blue-50 text-blue-800 border border-blue-200'
      }`;
      statusDiv.textContent = message;
      statusDiv.classList.remove('hidden');
      
      // Auto-hide after 10 seconds (increased from 5)
      setTimeout(() => {
        statusDiv.classList.add('hidden');
      }, 10000);
    }
    
    function addDebugLog(message, type = 'info') {
      const debugLog = document.getElementById('debugLog');
      const timestamp = new Date().toLocaleTimeString();
      const logEntry = document.createElement('div');
      logEntry.className = `mb-2 p-2 rounded ${
        type === 'success' ? 'bg-green-100 text-green-800' :
        type === 'error' ? 'bg-red-100 text-red-800' :
        type === 'warning' ? 'bg-yellow-100 text-yellow-800' :
        'bg-blue-100 text-blue-800'
      }`;
      logEntry.innerHTML = `<span class="text-gray-500">[${timestamp}]</span> ${message}`;
      
      // Remove the placeholder if it exists
      const placeholder = debugLog.querySelector('.text-gray-500');
      if (placeholder && placeholder.textContent === 'Debug information will appear here...') {
        placeholder.remove();
      }
      
      debugLog.appendChild(logEntry);
      debugLog.scrollTop = debugLog.scrollHeight;
    }
    
    window.clearDebugLog = function() {
      const debugLog = document.getElementById('debugLog');
      debugLog.innerHTML = '<div class="text-gray-500">Debug information will appear here...</div>';
    }
    
    // System Status Functions
    window.checkNotificationSupport = async function() {
      if (!('Notification' in window)) {
        updateStatus('notificationSupport', 'Not Supported', false);
        return;
      }
      
      const permission = Notification.permission;
      let status = permission.charAt(0).toUpperCase() + permission.slice(1);
      updateStatus('notificationSupport', status, permission === 'granted');
    };
    
    window.checkServiceWorker = async function() {
      if (!('serviceWorker' in navigator)) {
        updateStatus('serviceWorkerStatus', 'Not Supported', false);
        return;
      }
      
      try {
        const registrations = await navigator.serviceWorker.getRegistrations();
        if (registrations.length > 0) {
          updateStatus('serviceWorkerStatus', `Registered (${registrations.length})`, true);
        } else {
          updateStatus('serviceWorkerStatus', 'Not Registered', false);
        }
      } catch (error) {
        updateStatus('serviceWorkerStatus', 'Error', false);
      }
    };
    
    window.checkPushSubscription = async function() {
      if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
        updateStatus('pushSubscriptionStatus', 'Not Supported', false);
        return;
      }
      
      try {
        const registration = await navigator.serviceWorker.ready;
        const subscription = await registration.pushManager.getSubscription();
        
        if (subscription) {
          updateStatus('pushSubscriptionStatus', 'Active', true);
        } else {
          updateStatus('pushSubscriptionStatus', 'Not Active', false);
        }
      } catch (error) {
        updateStatus('pushSubscriptionStatus', 'Error', false);
      }
    };
    
    window.requestNotificationPermission = async function() {
      if (!('Notification' in window)) {
        showStatus('❌ This browser does not support notifications', 'error');
        return;
      }
      
      const permission = await Notification.requestPermission();
      if (permission === 'granted') {
        showStatus('✅ Notification permission granted!', 'success');
        checkNotificationSupport();
      } else {
        showStatus('❌ Notification permission denied', 'error');
      }
    };
    
    window.checkSystemStatus = function() {
      showStatus('🔄 Checking system status...', 'info');
      checkNotificationSupport();
      checkServiceWorker();
      checkPushSubscription();
      showStatus('✅ System status updated', 'success');
    };
    
    window.testDirectNotification = async function() {
      if (!('Notification' in window)) {
        showStatus('❌ This browser does not support notifications', 'error');
        return;
      }
      
      const permission = Notification.permission;
      if (permission !== 'granted') {
        showStatus('❌ Notification permission not granted. Please click "Request Notification Permission" first.', 'error');
        return;
      }
      
      try {
        showStatus('Sending direct browser notification...', 'info');
        
        const notification = new Notification('🧪 Direct Test Notification', {
          body: 'This is a direct browser notification test from Ymir Sailing Club!',
          icon: '/icon-192.svg',
          badge: '/icon-192.svg',
          vibrate: [200, 100, 200, 100, 200],
          tag: 'direct-test-notification',
          requireInteraction: true,
          silent: false,
          data: {
            type: 'direct_test',
            timestamp: new Date().toISOString()
          }
        });
        
        notification.onclick = function() {
          console.log('Direct notification clicked!');
          window.focus();
          notification.close();
        };
        
        notification.onshow = function() {
          console.log('✅ Direct notification displayed successfully!');
          showStatus('✅ Direct notification sent! Check your system notifications area.', 'success');
        };
        
        notification.onerror = function(error) {
          console.error('❌ Direct notification error:', error);
          showStatus('❌ Direct notification failed: ' + error.message, 'error');
        };
        
        // Auto-close after 5 seconds
        setTimeout(() => {
          notification.close();
        }, 5000);
        
      } catch (error) {
        showStatus('❌ Error creating direct notification: ' + error.message, 'error');
      }
    };
    
    window.verifyVapidKeys = async function() {
      addDebugLog(`🔑 Starting VAPID key verification...`, 'info');
      
      try {
        // Get the VAPID public key from the client-side code
        const clientVapidKey = 'BNr0dhFU7WG9GAdFO4vYzJBSYi3sPesGDeZVNayZ8KQMs2MjNMo5oNlM-KcxBiA1NrDPCktRmgfzKWdjBVw9MKY';
        addDebugLog(`🔑 Client VAPID Public Key: ${clientVapidKey}`, 'info');
        
        // Check if we have a push subscription
        if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
          addDebugLog(`❌ Push notifications not supported in this browser`, 'error');
          return;
        }
        
        const registration = await navigator.serviceWorker.ready;
        const subscription = await registration.pushManager.getSubscription();
        
        if (!subscription) {
          addDebugLog(`⚠️ No push subscription found. Please create one first.`, 'warning');
          return;
        }
        
        addDebugLog(`🔑 Push subscription found:`, 'success');
        addDebugLog(`   Endpoint: ${subscription.endpoint}`, 'info');
        addDebugLog(`   Keys present: ${subscription.getKey ? 'Yes' : 'No'}`, 'info');
        
        if (subscription.getKey) {
          const p256dh = subscription.getKey('p256dh');
          const auth = subscription.getKey('auth');
          
          if (p256dh) {
            addDebugLog(`   P256dh key length: ${p256dh.byteLength} bytes`, 'success');
          } else {
            addDebugLog(`   P256dh key: Missing`, 'error');
          }
          
          if (auth) {
            addDebugLog(`   Auth key length: ${auth.byteLength} bytes`, 'success');
          } else {
            addDebugLog(`   Auth key: Missing`, 'error');
          }
        }
        
        // Test if we can create a new subscription with the correct VAPID key
        try {
          const newSubscription = await registration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: clientVapidKey
          });
          addDebugLog(`✅ Successfully created new subscription with VAPID key`, 'success');
          addDebugLog(`   New endpoint: ${newSubscription.endpoint}`, 'info');
        } catch (error) {
          addDebugLog(`❌ Failed to create subscription with VAPID key: ${error.message}`, 'error');
        }
        
        showStatus(`✅ VAPID key verification completed - see debug log for details`, 'success');
        
      } catch (error) {
        const message = `❌ VAPID key verification failed: ${error.message}`;
        addDebugLog(message, 'error');
        addDebugLog(`❌ Error details: ${error.stack}`, 'error');
        showStatus(message, 'error');
      }
    };
    
    window.fixEncryptionKeys = async function() {
      addDebugLog(`🔧 Starting encryption keys fix...`, 'info');
      
      try {
        // Check if we have a push subscription
        if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
          addDebugLog(`❌ Push notifications not supported in this browser`, 'error');
          return;
        }
        
        const registration = await navigator.serviceWorker.ready;
        const currentSubscription = await registration.pushManager.getSubscription();
        
        if (currentSubscription) {
          addDebugLog(`🔍 Current subscription found, checking keys...`, 'info');
          
          const p256dh = currentSubscription.getKey('p256dh');
          const auth = currentSubscription.getKey('auth');
          
          if (p256dh && auth) {
            addDebugLog(`✅ Current subscription already has both keys`, 'success');
            addDebugLog(`   P256dh: ${p256dh.byteLength} bytes`, 'success');
            addDebugLog(`   Auth: ${auth.byteLength} bytes`, 'success');
            showStatus(`✅ Encryption keys are already present`, 'success');
            return;
          }
          
          addDebugLog(`⚠️ Current subscription missing keys, recreating...`, 'warning');
          await currentSubscription.unsubscribe();
          addDebugLog(`🗑️ Unsubscribed from old subscription`, 'info');
        }
        
        // Create a new subscription with proper keys
        addDebugLog(`🔄 Creating new subscription with proper encryption keys...`, 'info');
        
        const clientVapidKey = 'BNr0dhFU7WG9GAdFO4vYzJBSYi3sPesGDeZVNayZ8KQMs2MjNMo5oNlM-KcxBiA1NrDPCktRmgfzKWdjBVw9MKY';
        const newSubscription = await registration.pushManager.subscribe({
          userVisibleOnly: true,
          applicationServerKey: clientVapidKey
        });
        
        addDebugLog(`✅ New subscription created successfully!`, 'success');
        addDebugLog(`   Endpoint: ${newSubscription.endpoint}`, 'info');
        
        const newP256dh = newSubscription.getKey('p256dh');
        const newAuth = newSubscription.getKey('auth');
        
        if (newP256dh && newAuth) {
          addDebugLog(`✅ New subscription has proper encryption keys:`, 'success');
          addDebugLog(`   P256dh: ${newP256dh.byteLength} bytes`, 'success');
          addDebugLog(`   Auth: ${newAuth.byteLength} bytes`, 'success');
          
          // Update the subscription in the database
          addDebugLog(`💾 Updating subscription in database...`, 'info');
          
          // Extract keys on the frontend before sending to API
          const newP256dhKey = newSubscription.getKey('p256dh');
          const newAuthKey = newSubscription.getKey('auth');
          
          let p256dh = null;
          let auth = null;
          
          if (newP256dhKey) {
            p256dh = btoa(String.fromCharCode(...new Uint8Array(newP256dhKey)));
          }
          
          if (newAuthKey) {
            auth = btoa(String.fromCharCode(...new Uint8Array(newAuthKey)));
          }
          
          addDebugLog(`🔑 Extracted keys: P256dh=${p256dh ? 'present' : 'missing'}, Auth=${auth ? 'present' : 'missing'}`, 'info');
          
          const response = await fetch('/api/update-push-subscription', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              subscription: {
                endpoint: newSubscription.endpoint,
                p256dh: p256dh,
                auth: auth,
                userAgent: navigator.userAgent
              },
              memberNumber: '1234' // You might want to get this from the form
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            addDebugLog(`✅ Subscription updated in database successfully`, 'success');
            showStatus(`✅ Encryption keys fixed! New subscription created with proper keys.`, 'success');
          } else {
            addDebugLog(`❌ Failed to update subscription in database: ${result.error}`, 'error');
            showStatus(`⚠️ Keys fixed but database update failed: ${result.error}`, 'warning');
          }
        } else {
          addDebugLog(`❌ New subscription still missing encryption keys`, 'error');
          showStatus(`❌ Failed to create subscription with proper keys`, 'error');
        }
        
      } catch (error) {
        const message = `❌ Encryption keys fix failed: ${error.message}`;
        addDebugLog(message, 'error');
        addDebugLog(`❌ Error details: ${error.stack}`, 'error');
        showStatus(message, 'error');
      }
    };
    
    window.updateDatabaseSubscriptions = async function() {
      addDebugLog(`🔄 Starting database subscription update...`, 'info');
      
      try {
        // Check if we have a push subscription
        if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
          addDebugLog(`❌ Push notifications not supported in this browser`, 'error');
          return;
        }
        
        const registration = await navigator.serviceWorker.ready;
        const currentSubscription = await registration.pushManager.getSubscription();
        
        if (!currentSubscription) {
          addDebugLog(`⚠️ No push subscription found. Please create one first.`, 'warning');
          return;
        }
        
        addDebugLog(`🔍 Current subscription found, extracting keys...`, 'info');
        
        // Extract encryption keys from current subscription
        const currentP256dhKey = currentSubscription.getKey('p256dh');
        const currentAuthKey = currentSubscription.getKey('auth');
        
        if (!currentP256dhKey || !currentAuthKey) {
          addDebugLog(`❌ Current subscription missing encryption keys`, 'error');
          addDebugLog(`   P256dh: ${currentP256dhKey ? 'Present' : 'Missing'}`, currentP256dhKey ? 'success' : 'error');
          addDebugLog(`   Auth: ${currentAuthKey ? 'Present' : 'Missing'}`, currentAuthKey ? 'success' : 'error');
          return;
        }
        
        addDebugLog(`✅ Current subscription has proper keys:`, 'success');
        addDebugLog(`   P256dh: ${currentP256dhKey.byteLength} bytes`, 'success');
        addDebugLog(`   Auth: ${currentAuthKey.byteLength} bytes`, 'success');
        
        // Update the subscription in the database
        addDebugLog(`💾 Updating subscription in database...`, 'info');
        
        // Extract keys on the frontend before sending to API
        // (Keys already extracted above)
        
        let p256dh = null;
        let auth = null;
        
        if (currentP256dhKey) {
          p256dh = btoa(String.fromCharCode(...new Uint8Array(currentP256dhKey)));
        }
        
        if (currentAuthKey) {
          auth = btoa(String.fromCharCode(...new Uint8Array(currentAuthKey)));
        }
        
        addDebugLog(`🔑 Extracted keys: P256dh=${p256dh ? 'present' : 'missing'}, Auth=${auth ? 'present' : 'missing'}`, 'info');
        
        const response = await fetch('/api/update-push-subscription', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            subscription: {
              endpoint: currentSubscription.endpoint,
              p256dh: p256dh,
              auth: auth,
              userAgent: navigator.userAgent
            },
            memberNumber: '1234'
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          addDebugLog(`✅ Database subscription updated successfully`, 'success');
          showStatus(`✅ Database subscription updated with proper encryption keys!`, 'success');
          
          // Wait a moment then refresh the debug info
          setTimeout(() => {
            addDebugLog(`🔄 Refreshing subscription debug info...`, 'info');
            debugSubscriptions();
          }, 1000);
        } else {
          addDebugLog(`❌ Failed to update database subscription: ${result.error}`, 'error');
          showStatus(`❌ Failed to update database: ${result.error}`, 'error');
        }
        
      } catch (error) {
        const message = `❌ Database subscription update failed: ${error.message}`;
        addDebugLog(message, 'error');
        addDebugLog(`❌ Error details: ${error.stack}`, 'error');
        showStatus(message, 'error');
      }
    };
    
    // Notification Testing Functions
    window.testNotification = async function(type) {
      if (window.isTesting) return;
      
      window.isTesting = true;
      const memberNumber = document.getElementById('memberNumber').value.trim();
      
      addDebugLog(`🧪 Starting test notification: type=${type}, memberNumber=${memberNumber || 'all'}`, 'info');
      showStatus('Sending test notification...', 'info');
      
      try {
        const url = `/api/test-notification?type=${type}${memberNumber ? `&memberNumber=${memberNumber}` : ''}`;
        addDebugLog(`📡 Making request to: ${url}`, 'info');
        
        const response = await fetch(url);
        addDebugLog(`📡 Response status: ${response.status} ${response.statusText}`, response.ok ? 'success' : 'error');
        
        const data = await response.json();
        addDebugLog(`📡 Response data: ${JSON.stringify(data, null, 2)}`, 'info');
        
        if (data.success) {
          const message = `✅ Test notification sent successfully! Sent to ${data.sentTo} device(s)${data.failed > 0 ? `, ${data.failed} failed` : ''}`;
          addDebugLog(message, 'success');
          showStatus(message, 'success');
        } else {
          const message = `❌ Failed to send notification: ${data.error}`;
          addDebugLog(message, 'error');
          showStatus(message, 'error');
        }
      } catch (error) {
        const message = `❌ Error: ${error.message}`;
        addDebugLog(message, 'error');
        addDebugLog(`❌ Error details: ${error.stack}`, 'error');
        showStatus(message, 'error');
      } finally {
        window.isTesting = false;
        addDebugLog(`🏁 Test notification completed`, 'info');
      }
    };
    
    // Subscription Management Functions
    
    window.fixSubscriptionLink = async function() {
      const memberNumber = document.getElementById('memberNumber').value.trim();
      
      if (!memberNumber) {
        showStatus('❌ Please enter your member number first', 'error');
        return;
      }
      
      showStatus('Fixing subscription link...', 'info');
      
      try {
        if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
          showStatus('❌ This browser does not support push notifications', 'error');
          return;
        }
        
        const registration = await navigator.serviceWorker.ready;
        const subscription = await registration.pushManager.getSubscription();
        
        if (!subscription) {
          showStatus('❌ No push subscription found. Please grant notification permission first.', 'error');
          return;
        }
        
        const response = await fetch('/api/push-subscription', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            subscription: subscription,
            userAgent: navigator.userAgent,
            timestamp: new Date().toISOString(),
            memberNumber: memberNumber
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          showStatus(`✅ Subscription linked to member ${memberNumber}! Try testing notifications now.`, 'success');
        } else {
          showStatus(`❌ Failed to link subscription: ${data.error}`, 'error');
        }
      } catch (error) {
        showStatus(`❌ Error: ${error.message}`, 'error');
      }
    };
    
    window.testNotificationSystem = async function() {
      showStatus('Testing notification system...', 'info');
      
      try {
        const response = await fetch('/api/notification-check?action=admin-test');
        const data = await response.json();
        
        if (data.success) {
          showStatus('✅ Notification system test completed! Check console for details.', 'success');
        } else {
          showStatus(`❌ Notification system test failed: ${data.error}`, 'error');
        }
      } catch (error) {
        showStatus(`❌ Error: ${error.message}`, 'error');
      }
    };
    
    window.debugSubscriptions = async function() {
      const memberNumber = document.getElementById('memberNumber').value.trim();
      
      addDebugLog(`🔍 Starting subscription debug: memberNumber=${memberNumber || 'all'}`, 'info');
      showStatus('Checking subscription database...', 'info');
      
      try {
        const url = `/api/test-notification?debug=true${memberNumber ? `&memberNumber=${memberNumber}` : ''}`;
        addDebugLog(`📡 Making debug request to: ${url}`, 'info');
        
        const response = await fetch(url);
        addDebugLog(`📡 Debug response status: ${response.status} ${response.statusText}`, response.ok ? 'success' : 'error');
        
        const data = await response.json();
        addDebugLog(`📡 Debug response data: ${JSON.stringify(data, null, 2)}`, 'info');
        
        if (data.success) {
          addDebugLog(`📊 Subscription Debug Summary:`, 'info');
          addDebugLog(`   Total subscriptions: ${data.totalSubscriptions}`, 'info');
          addDebugLog(`   Your subscriptions: ${data.memberSubscriptions}`, 'info');
          addDebugLog(`   Member number: ${data.memberNumber || 'Not specified'}`, 'info');
          
          if (data.allSubscriptions && data.allSubscriptions.length > 0) {
            addDebugLog(`📋 All subscriptions in database:`, 'info');
          data.allSubscriptions.forEach((sub, index) => {
              addDebugLog(`   ${index + 1}. Member ${sub.member_number || 'null'}`, 'info');
              addDebugLog(`      Endpoint: ${sub.endpoint}`, 'info');
              addDebugLog(`      User Agent: ${sub.user_agent}`, 'info');
              addDebugLog(`      Created: ${new Date(sub.created_at).toLocaleString()}`, 'info');
              addDebugLog(`      P256dh: ${sub.p256dh ? 'Present' : 'Missing'}`, sub.p256dh ? 'success' : 'warning');
              addDebugLog(`      Auth: ${sub.auth ? 'Present' : 'Missing'}`, sub.auth ? 'success' : 'warning');
            });
          } else {
            addDebugLog(`⚠️ No subscriptions found in database`, 'warning');
          }
          
          showStatus(`✅ Debug completed - see debug log for details`, 'success');
        } else {
          const message = `❌ Debug failed: ${data.error}`;
          addDebugLog(message, 'error');
          showStatus(message, 'error');
        }
      } catch (error) {
        const message = `❌ Error: ${error.message}`;
        addDebugLog(message, 'error');
        addDebugLog(`❌ Error details: ${error.stack}`, 'error');
        showStatus(message, 'error');
      }
    };
    
    // Cron Job Testing
    window.testCronJob = async function() {
      addDebugLog(`🕐 Testing cron job manually...`, 'info');
      showStatus('Testing cron job...', 'info');
      
      try {
        const response = await fetch('/api/cron-notifications', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        addDebugLog(`📡 Cron job response status: ${response.status} ${response.statusText}`, response.ok ? 'success' : 'error');
        
        const data = await response.json();
        addDebugLog(`📡 Cron job response data: ${JSON.stringify(data, null, 2)}`, 'info');
        
        if (data.success) {
          addDebugLog(`✅ Cron job executed successfully!`, 'success');
          addDebugLog(`   Message: ${data.message}`, 'info');
          addDebugLog(`   Timestamp: ${data.timestamp}`, 'info');
          showStatus(`✅ Cron job test completed successfully!`, 'success');
        } else {
          const message = `❌ Cron job failed: ${data.error}`;
          addDebugLog(message, 'error');
          showStatus(message, 'error');
        }
      } catch (error) {
        const message = `❌ Error testing cron job: ${error.message}`;
        addDebugLog(message, 'error');
        addDebugLog(`❌ Error details: ${error.stack}`, 'error');
        showStatus(message, 'error');
      }
    };
    
    // Webhook Testing
    window.testWebhook = async function() {
      addDebugLog(`🔗 Testing webhook endpoint...`, 'info');
      showStatus('Testing webhook...', 'info');
      
      try {
        // Test with API key
        const apiKey = 'ymir-sailing-club-2024'; // Default key
        const response = await fetch(`/api/webhook-notifications?key=${apiKey}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        addDebugLog(`📡 Webhook response status: ${response.status} ${response.statusText}`, response.ok ? 'success' : 'error');
        
        const data = await response.json();
        addDebugLog(`📡 Webhook response data: ${JSON.stringify(data, null, 2)}`, 'info');
        
        if (data.success) {
          addDebugLog(`✅ Webhook executed successfully!`, 'success');
          addDebugLog(`   Message: ${data.message}`, 'info');
          addDebugLog(`   Timestamp: ${data.timestamp}`, 'info');
          addDebugLog(`🔗 Webhook URL for external cron services:`, 'info');
          addDebugLog(`   ${window.location.origin}/api/webhook-notifications?key=${apiKey}`, 'info');
          showStatus(`✅ Webhook test completed successfully!`, 'success');
        } else {
          const message = `❌ Webhook failed: ${data.error}`;
          addDebugLog(message, 'error');
          showStatus(message, 'error');
        }
      } catch (error) {
        const message = `❌ Error testing webhook: ${error.message}`;
        addDebugLog(message, 'error');
        addDebugLog(`❌ Error details: ${error.stack}`, 'error');
        showStatus(message, 'error');
      }
    };
    
    // Cleanup Invalid Subscriptions
    window.cleanupInvalidSubscriptions = async function() {
      if (!confirm('⚠️ WARNING: This will delete all push subscriptions that are missing encryption keys (p256dh or auth). This action cannot be undone. Are you sure you want to continue?')) {
        return;
      }
      
      addDebugLog(`🧹 Starting cleanup of invalid push subscriptions...`, 'info');
      showStatus('Cleaning up invalid subscriptions...', 'info');
      
      try {
        const response = await fetch('/api/cleanup-invalid-subscriptions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        addDebugLog(`📡 Cleanup response status: ${response.status} ${response.statusText}`, response.ok ? 'success' : 'error');
        
        const data = await response.json();
        addDebugLog(`📡 Cleanup response data: ${JSON.stringify(data, null, 2)}`, 'info');
        
        if (data.success) {
          addDebugLog(`✅ Cleanup completed successfully!`, 'success');
          addDebugLog(`   Removed ${data.deletedCount} invalid subscriptions`, 'info');
          showStatus(`✅ Cleanup completed! Removed ${data.deletedCount} invalid subscriptions`, 'success');
        } else {
          const message = `❌ Cleanup failed: ${data.error}`;
          addDebugLog(message, 'error');
          showStatus(message, 'error');
        }
      } catch (error) {
        const message = `❌ Error during cleanup: ${error.message}`;
        addDebugLog(message, 'error');
        addDebugLog(`❌ Error details: ${error.stack}`, 'error');
        showStatus(message, 'error');
      }
    };
    
    // Advanced Admin Functions
    window.deleteAllSubscriptions = async function() {
      if (!confirm('⚠️ WARNING: This will delete ALL push notification subscriptions from the database, simulating all users logging out. This action cannot be undone. Are you sure you want to continue?')) {
        return;
      }
      
      showStatus('Deleting all subscriptions...', 'info');
      
      try {
        const adminMember = localStorage.getItem('adminMember');
        if (!adminMember) {
          showStatus('❌ Admin authentication required. Please log in as admin first.', 'error');
          return;
        }
        
        const member = JSON.parse(adminMember);
        
        const response = await fetch('/api/delete-all-subscriptions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ adminMember: member })
        });
        
        const data = await response.json();
        
        if (data.success) {
          showStatus(`✅ Successfully deleted ${data.deletedCount} push subscriptions! All users will need to log in again to receive notifications.`, 'success');
        } else {
          showStatus(`❌ Failed to delete subscriptions: ${data.error}`, 'error');
        }
      } catch (error) {
        showStatus(`❌ Error: ${error.message}`, 'error');
      }
    };
  </script>
</Layout>