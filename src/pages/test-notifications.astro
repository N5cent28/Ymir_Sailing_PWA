---
// Test Notifications Page
// Allows easy testing of push notifications
---

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Test Notifications - Ymir Sailing Club</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f5f5f5;
    }
    .container {
      background: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .test-button {
      background: #2563eb;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      margin: 10px;
      font-size: 16px;
    }
    .test-button:hover {
      background: #1d4ed8;
    }
    .test-button:disabled {
      background: #9ca3af;
      cursor: not-allowed;
    }
    .status {
      margin: 20px 0;
      padding: 15px;
      border-radius: 6px;
      font-weight: bold;
    }
    .success {
      background: #d1fae5;
      color: #065f46;
      border: 1px solid #10b981;
    }
    .error {
      background: #fee2e2;
      color: #991b1b;
      border: 1px solid #ef4444;
    }
    .info {
      background: #dbeafe;
      color: #1e40af;
      border: 1px solid #3b82f6;
    }
    .member-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #d1d5db;
      border-radius: 6px;
      margin: 10px 0;
    }
    .section {
      margin: 30px 0;
      padding: 20px;
      border: 1px solid #e5e7eb;
      border-radius: 6px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üß™ Test Push Notifications</h1>
    <p>Use this page to test push notifications for the Ymir Sailing Club PWA.</p>
    
    <div class="section">
      <h2>üì± Test Setup</h2>
      <p>Make sure you have:</p>
      <ul>
        <li>Granted notification permission in your browser</li>
        <li>Logged into the PWA (to link your member number)</li>
        <li>Your PWA installed or running in the browser</li>
      </ul>
      
      <label for="memberNumber">Member Number (optional - leave empty to test all users):</label>
      <input type="text" id="memberNumber" class="member-input" placeholder="e.g., 123">
    </div>
    
    <div class="section">
      <h2>üîî Test Different Notification Types</h2>
      
      <button class="test-button" onclick="testNotification('test')">
        üì¢ Basic Test Notification
      </button>
      
      <button class="test-button" onclick="testNotification('checkout')">
        ‚õµ Boat Checkout Confirmation
      </button>
      
      <button class="test-button" onclick="testNotification('reminder')">
        ‚è∞ Time Extension Reminder
      </button>
      
      <button class="test-button" onclick="testNotification('overdue')">
        üö® Overdue Boat Alert
      </button>
    </div>
    
    <div class="section">
      <h2>üîß Debug Information</h2>
      <button class="test-button" onclick="checkNotificationSupport()">
        Check Notification Support
      </button>
      
      <button class="test-button" onclick="checkServiceWorker()">
        Check Service Worker
      </button>
      
      <button class="test-button" onclick="checkPushSubscription()">
        Check Push Subscription
      </button>
      
      <button class="test-button" onclick="fixSubscriptionLink()" style="background: #dc2626;">
        üîó Fix Subscription Link
      </button>
      
      <button class="test-button" onclick="debugSubscriptions()" style="background: #7c3aed;">
        üîç Debug Subscriptions
      </button>
    </div>
    
    <div class="section">
      <h2>‚ö†Ô∏è Advanced Testing</h2>
      <p><strong>Warning:</strong> These actions affect all users and should only be used for testing purposes.</p>
      
      <button class="test-button" onclick="deleteAllSubscriptions()" style="background: #dc2626;">
        üóëÔ∏è Delete All Subscriptions
      </button>
      
      <p class="text-sm text-gray-600 mt-2">
        This simulates all users logging out by removing all push notification subscriptions from the database.
      </p>
    </div>
    
    <div id="status"></div>
  </div>

  <script>
    // Make functions globally available
    window.testNotification = async function(type) {
      if (window.isTesting) return;
      
      window.isTesting = true;
      const memberNumber = document.getElementById('memberNumber').value.trim();
      
      showStatus('Sending test notification...', 'info');
      
      try {
        const url = `/api/test-notification?type=${type}${memberNumber ? `&memberNumber=${memberNumber}` : ''}`;
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.success) {
          showStatus(`‚úÖ Test notification sent successfully! Sent to ${data.sentTo} device(s)${data.failed > 0 ? `, ${data.failed} failed` : ''}`, 'success');
        } else {
          showStatus(`‚ùå Failed to send notification: ${data.error}`, 'error');
        }
      } catch (error) {
        showStatus(`‚ùå Error: ${error.message}`, 'error');
      } finally {
        window.isTesting = false;
      }
    };
    
    window.checkNotificationSupport = async function() {
      if (!('Notification' in window)) {
        showStatus('‚ùå This browser does not support notifications', 'error');
        return;
      }
      
      const permission = Notification.permission;
      let message = `Notification permission: ${permission}`;
      
      if (permission === 'granted') {
        message += ' ‚úÖ';
        showStatus(message, 'success');
      } else if (permission === 'denied') {
        message += ' ‚ùå (You need to enable notifications in your browser settings)';
        showStatus(message, 'error');
      } else {
        message += ' ‚ö†Ô∏è (Click "Allow" when prompted)';
        showStatus(message, 'info');
      }
    };
    
    window.checkServiceWorker = async function() {
      if (!('serviceWorker' in navigator)) {
        showStatus('‚ùå This browser does not support service workers', 'error');
        return;
      }
      
      try {
        const registrations = await navigator.serviceWorker.getRegistrations();
        if (registrations.length > 0) {
          showStatus(`‚úÖ Service worker registered (${registrations.length} registration(s))`, 'success');
        } else {
          showStatus('‚ö†Ô∏è No service worker registered', 'info');
        }
      } catch (error) {
        showStatus(`‚ùå Error checking service worker: ${error.message}`, 'error');
      }
    };
    
    window.checkPushSubscription = async function() {
      if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
        showStatus('‚ùå This browser does not support push notifications', 'error');
        return;
      }
      
      try {
        const registration = await navigator.serviceWorker.ready;
        const subscription = await registration.pushManager.getSubscription();
        
        if (subscription) {
          showStatus('‚úÖ Push subscription active', 'success');
        } else {
          showStatus('‚ö†Ô∏è No push subscription found. Make sure you are logged in and have granted notification permission.', 'info');
        }
      } catch (error) {
        showStatus(`‚ùå Error checking push subscription: ${error.message}`, 'error');
      }
    };
    
    window.fixSubscriptionLink = async function() {
      const memberNumber = document.getElementById('memberNumber').value.trim();
      
      if (!memberNumber) {
        showStatus('‚ùå Please enter your member number first', 'error');
        return;
      }
      
      showStatus('Fixing subscription link...', 'info');
      
      try {
        // Get current subscription
        if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
          showStatus('‚ùå This browser does not support push notifications', 'error');
          return;
        }
        
        const registration = await navigator.serviceWorker.ready;
        const subscription = await registration.pushManager.getSubscription();
        
        if (!subscription) {
          showStatus('‚ùå No push subscription found. Please grant notification permission first.', 'error');
          return;
        }
        
        // Update subscription with member number
        const response = await fetch('/api/push-subscription', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            subscription: subscription,
            userAgent: navigator.userAgent,
            timestamp: new Date().toISOString(),
            memberNumber: memberNumber
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          showStatus(`‚úÖ Subscription linked to member ${memberNumber}! Try testing notifications now.`, 'success');
        } else {
          showStatus(`‚ùå Failed to link subscription: ${data.error}`, 'error');
        }
      } catch (error) {
        showStatus(`‚ùå Error: ${error.message}`, 'error');
      }
    };
    
    window.debugSubscriptions = async function() {
      const memberNumber = document.getElementById('memberNumber').value.trim();
      
      showStatus('Checking subscription database...', 'info');
      
      try {
        const url = `/api/test-notification?debug=true${memberNumber ? `&memberNumber=${memberNumber}` : ''}`;
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.success) {
          let message = `üìä Subscription Debug Info:\n`;
          message += `Total subscriptions: ${data.totalSubscriptions}\n`;
          message += `Your subscriptions: ${data.memberSubscriptions}\n`;
          message += `Member number: ${data.memberNumber || 'Not specified'}\n\n`;
          message += `All subscriptions:\n`;
          
          data.allSubscriptions.forEach((sub, index) => {
            message += `${index + 1}. Member ${sub.member_number || 'null'} - ${sub.endpoint}\n`;
            message += `   User Agent: ${sub.user_agent}\n`;
            message += `   Created: ${new Date(sub.created_at).toLocaleString()}\n\n`;
          });
          
          showStatus(message, 'info');
        } else {
          showStatus(`‚ùå Debug failed: ${data.error}`, 'error');
        }
      } catch (error) {
        showStatus(`‚ùå Error: ${error.message}`, 'error');
      }
    };
    
    window.deleteAllSubscriptions = async function() {
      if (!confirm('‚ö†Ô∏è WARNING: This will delete ALL push notification subscriptions from the database, simulating all users logging out. This action cannot be undone. Are you sure you want to continue?')) {
        return;
      }
      
      showStatus('Deleting all subscriptions...', 'info');
      
      try {
        // Get admin member info from localStorage
        const adminMember = localStorage.getItem('adminMember');
        if (!adminMember) {
          showStatus('‚ùå Admin authentication required. Please log in as admin first.', 'error');
          return;
        }
        
        const member = JSON.parse(adminMember);
        
        const response = await fetch('/api/delete-all-subscriptions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-admin-member': JSON.stringify(member)
          }
        });
        
        const data = await response.json();
        
        if (data.success) {
          showStatus(`‚úÖ Successfully deleted ${data.deletedCount} push subscriptions! All users will need to log in again to receive notifications.`, 'success');
        } else {
          showStatus(`‚ùå Failed to delete subscriptions: ${data.error}`, 'error');
        }
      } catch (error) {
        showStatus(`‚ùå Error: ${error.message}`, 'error');
      }
    };
    
    function showStatus(message, type = 'info') {
      const statusDiv = document.getElementById('status');
      statusDiv.innerHTML = `<div class="status ${type}">${message}</div>`;
    }
    
    // Initialize
    window.isTesting = false;
    
    // Auto-check on page load
    document.addEventListener('DOMContentLoaded', () => {
      checkNotificationSupport();
      checkServiceWorker();
      checkPushSubscription();
    });
  </script>
</body>
</html>