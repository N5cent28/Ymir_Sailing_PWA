---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
---

<Layout title="Skilabo√∞ - Ymir Sailing Club" lang="is">
  <Navigation />
  
  <main>
    <!-- Hero Section -->
    <section class="bg-gradient-to-br from-ocean-blue to-blue-600 text-white py-20">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h1 class="text-5xl font-bold mb-6">
          Skilabo√∞
        </h1>
        <p class="text-xl mb-8 max-w-3xl mx-auto">
          Haf√∞u samband vi√∞ samsiglara og vertu uppl√Ωstur um kl√∫bbstarfsemi.
        </p>
      </div>
    </section>

    <!-- Messages Content -->
    <section class="py-16 bg-white">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Messages Container -->
        <div class="bg-sail-white rounded-lg shadow-lg">
          <!-- Header -->
          <div class="border-b border-gray-200 p-6">
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-xl font-bold text-ocean-blue" id="chatTitle">
                  Veldu me√∞lim til a√∞ byrja a√∞ senda skilabo√∞
                </h3>
                <p class="text-sm text-gray-600" id="chatSubtitle">
                  Veldu √∫r me√∞limalistanum h√©r a√∞ ne√∞an
                </p>
              </div>
              <div class="flex items-center space-x-2">
                <span class="text-sm text-gray-500">√ìlesi√∞:</span>
                <span class="bg-red-500 text-white text-xs rounded-full px-2 py-1" id="unreadCount">0</span>
              </div>
            </div>
          </div>

          <!-- Messages Area -->
          <div class="flex h-96">
            <!-- Members List -->
            <div class="w-1/3 border-r border-gray-200 bg-gray-50">
              <div class="p-4 border-b border-gray-200">
                <h4 class="font-semibold text-gray-900 mb-2">Kl√∫bbme√∞limir</h4>
                <input
                  type="text"
                  id="memberSearch"
                  placeholder="Leita a√∞ me√∞limum..."
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-ocean-blue"
                />
              </div>
              <div class="overflow-y-auto h-80" id="membersList">
                <!-- Members will be loaded here -->
              </div>
            </div>

            <!-- Chat Area -->
            <div class="flex-1 flex flex-col">
              <!-- Messages Display -->
              <div class="flex-1 overflow-y-auto p-4" id="messagesArea">
                <div class="text-center text-gray-500 py-8">
                  <div class="text-4xl mb-4">üí¨</div>
                  <p>Veldu me√∞lim til a√∞ byrja samtal</p>
                </div>
              </div>

              <!-- Message Input -->
              <div class="border-t border-gray-200 p-4" id="messageInputContainer" style="display: none;">
                <div class="flex space-x-2">
                  <input
                    type="text"
                    id="messageInput"
                    placeholder="Skrifa√∞u skilabo√∞..."
                    class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-ocean-blue"
                  />
                  <button
                    id="sendMessageBtn"
                    class="px-4 py-2 bg-ocean-blue text-white rounded-lg hover:bg-blue-700 transition-colors font-semibold"
                  >
                    Senda
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <script>
    // Simple authentication check
    function getCurrentUser() {
      try {
        const memberData = localStorage.getItem('ymir_current_member');
        const expiryTime = localStorage.getItem('ymir_session_expiry');
        
        if (!memberData || !expiryTime) {
          return null;
        }
        
        if (Date.now() > parseInt(expiryTime)) {
          localStorage.removeItem('ymir_current_member');
          localStorage.removeItem('ymir_session_expiry');
          return null;
        }
        
        return JSON.parse(memberData);
      } catch (error) {
        return null;
      }
    }

    // Check if user is logged in
    const currentMember = getCurrentUser();
    if (!currentMember) {
      window.location.href = '/is/profile?returnUrl=' + encodeURIComponent(window.location.pathname);
    }

    // Check for URL parameters to pre-select a member
    const urlParams = new URLSearchParams(window.location.search);
    const preSelectedMemberNumber = urlParams.get('member');
    const preSelectedMemberName = urlParams.get('name');

    let allMembers = [];
    let selectedMember = null;
    let messages = [];

    const membersList = document.getElementById('membersList');
    const messagesArea = document.getElementById('messagesArea');
    const messageInput = document.getElementById('messageInput');
    const sendMessageBtn = document.getElementById('sendMessageBtn');
    const messageInputContainer = document.getElementById('messageInputContainer');
    const chatTitle = document.getElementById('chatTitle');
    const chatSubtitle = document.getElementById('chatSubtitle');
    const memberSearch = document.getElementById('memberSearch');
    const unreadCount = document.getElementById('unreadCount');

    // Load all members
    async function loadMembers() {
      try {
        const response = await fetch('/api/members');
        const data = await response.json();
        
        if (data.success) {
          allMembers = data.members.filter(member => member.member_number !== currentMember.member_number);
          displayMembers(allMembers);
          
          // Auto-select member if provided in URL
          if (preSelectedMemberNumber && preSelectedMemberName) {
            await selectMember(preSelectedMemberNumber, preSelectedMemberName);
          }
        }
      } catch (error) {
        console.error('Error loading members:', error);
      }
    }

    // Display members in list
    function displayMembers(members) {
      membersList.innerHTML = members.map(member => `
        <div 
          class="p-3 hover:bg-gray-100 cursor-pointer border-b border-gray-200 member-item"
          data-member-number="${member.member_number}"
          onclick="selectMember('${member.member_number}', '${member.name}')"
        >
          <div class="flex items-center">
            <div class="w-10 h-10 bg-ocean-blue rounded-full flex items-center justify-center text-white text-sm font-bold mr-3">
              ${member.profile_picture ? 
                `<img src="${member.profile_picture}" alt="Profile" class="w-full h-full object-cover rounded-full">` :
                member.name.split(' ').map(n => n[0]).join('').toUpperCase()
              }
            </div>
            <div class="flex-1">
              <div class="font-semibold text-gray-900">${member.name}</div>
              <div class="text-xs text-gray-500">${member.bio || 'Engin l√Ωsing'}</div>
            </div>
          </div>
        </div>
      `).join('');
    }

    // Select a member to chat with
    async function selectMember(memberNumber, memberName) {
      selectedMember = { memberNumber, name: memberName };
      
      // Update UI
      chatTitle.textContent = memberName;
      chatSubtitle.textContent = '√ùttu til a√∞ senda skilabo√∞';
      messageInputContainer.style.display = 'block';
      
      // Highlight selected member
      document.querySelectorAll('.member-item').forEach(item => {
        item.classList.remove('bg-blue-100');
      });
      document.querySelector(`[data-member-number="${memberNumber}"]`).classList.add('bg-blue-100');
      
      // Load messages
      await loadMessages();
    }

    // Load messages for selected member
    async function loadMessages() {
      if (!selectedMember) return;
      
      try {
        const response = await fetch(`/api/messages?action=conversation&memberNumber1=${currentMember.member_number}&memberNumber2=${selectedMember.memberNumber}`);
        const data = await response.json();
        
        if (data.success) {
          messages = data.messages;
          displayMessages();
        }
      } catch (error) {
        console.error('Error loading messages:', error);
      }
    }

    // Display messages
    function displayMessages() {
      if (messages.length === 0) {
        messagesArea.innerHTML = `
          <div class="text-center text-gray-500 py-8">
            <div class="text-4xl mb-4">üí¨</div>
            <p>Engin skilabo√∞ enn. Byrja√∞u samtal!</p>
          </div>
        `;
        return;
      }

      messagesArea.innerHTML = messages.map(msg => {
        const isOwnMessage = msg.sender_member_number === currentMember.member_number;
        const messageTime = new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        return `
          <div class="flex ${isOwnMessage ? 'justify-end' : 'justify-start'} mb-4">
            <div class="max-w-xs lg:max-w-md">
              <div class="flex items-end space-x-2">
                ${!isOwnMessage ? `
                  <div class="w-8 h-8 bg-ocean-blue rounded-full flex items-center justify-center text-white text-xs font-bold">
                    ${selectedMember.name.split(' ').map(n => n[0]).join('').toUpperCase()}
                  </div>
                ` : ''}
                <div class="bg-${isOwnMessage ? 'ocean-blue text-white' : 'gray-200 text-gray-900'} rounded-lg px-4 py-2">
                  <p class="text-sm">${msg.message}</p>
                  <p class="text-xs ${isOwnMessage ? 'text-blue-100' : 'text-gray-500'} mt-1">${messageTime}</p>
                </div>
                ${isOwnMessage ? `
                  <div class="w-8 h-8 bg-ocean-blue rounded-full flex items-center justify-center text-white text-xs font-bold">
                    ${currentMember.name.split(' ').map(n => n[0]).join('').toUpperCase()}
                  </div>
                ` : ''}
              </div>
            </div>
          </div>
        `;
      }).join('');
      
      // Scroll to bottom
      messagesArea.scrollTop = messagesArea.scrollHeight;
    }

    // Send message
    async function sendMessage() {
      if (!selectedMember || !messageInput.value.trim()) return;
      
      const message = messageInput.value.trim();
      
      try {
        const response = await fetch('/api/messages', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: 'send',
            senderMemberNumber: currentMember.member_number,
            receiverMemberNumber: selectedMember.memberNumber,
            message: message
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          messageInput.value = '';
          await loadMessages();
        }
      } catch (error) {
        console.error('Error sending message:', error);
      }
    }

    // Load unread count
    async function loadUnreadCount() {
      try {
        const response = await fetch(`/api/messages?action=unreadCount&memberNumber1=${currentMember.member_number}`);
        const data = await response.json();
        
        if (data.success) {
          unreadCount.textContent = data.count;
          unreadCount.style.display = data.count > 0 ? 'inline' : 'none';
        }
      } catch (error) {
        console.error('Error loading unread count:', error);
      }
    }

    // Search members
    memberSearch.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();
      const filteredMembers = allMembers.filter(member => 
        member.name.toLowerCase().includes(searchTerm)
      );
      displayMembers(filteredMembers);
    });

    // Send message on Enter key
    messageInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });

    // Send message button
    sendMessageBtn.addEventListener('click', sendMessage);

    // Make functions globally available
    window.selectMember = selectMember;

    // Load initial data
    loadMembers();
    loadUnreadCount();

    // Refresh unread count every 30 seconds
    setInterval(loadUnreadCount, 30000);
  </script>
</Layout> 